const path = require('path');
require('dotenv').config();

// Configurar paths
process.env.NODE_PATH = path.join(__dirname, 'src');

const { spawn } = require('child_process');
const DirewolfManager = require('./src/utils/direwolfManager');
const APRS = require('./src/modules/aprs');
const { ConfigManager } = require('./src/config/ConfigManager');
const AudioManager = require('./src/audio/audioManager');

/**
 * Test de APRS con audio real - transmisi√≥n y recepci√≥n por placa de sonido
 */
async function testAPRSAudio() {
    console.log('üîä Test de APRS con Audio Real\n');

    let config, audio, aprs, direwolf;

    try {
        console.log('üì° === CONFIGURACI√ìN CON AUDIO REAL ===');
        console.log('üéµ Dispositivo de salida: plughw:0,0 (CX20561 Analog)');
        console.log('üé§ Dispositivo de entrada: plughw:0,0 (CX20561 Analog)');
        console.log('üìª Modo: VOX (activaci√≥n por voz)');
        console.log('üîä Volumen del sistema: Configurado');
        console.log();

        // Inicializar componentes
        console.log('1. Inicializando componentes...');
        config = new ConfigManager();
        audio = new AudioManager(config);
        
        // Crear DirewolfManager con audio real
        direwolf = new DirewolfManager();
        console.log('   ‚úÖ DirewolfManager creado con audio real');
        
        // Generar configuraci√≥n con audio
        console.log('\n2. Generando configuraci√≥n con placa de sonido...');
        const configGenerated = direwolf.generateConfig();
        console.log(`   Configuraci√≥n generada: ${configGenerated ? '‚úÖ S√ç' : '‚ùå NO'}`);
        
        // Mostrar configuraci√≥n de audio
        const fs = require('fs');
        const configPath = path.join(__dirname, 'config/direwolf.conf');
        if (fs.existsSync(configPath)) {
            const configContent = fs.readFileSync(configPath, 'utf8');
            const hasRealAudio = configContent.includes('plughw:0,0');
            console.log(`   Audio real configurado: ${hasRealAudio ? '‚úÖ S√ç' : '‚ùå NO'}`);
            
            if (hasRealAudio) {
                console.log('   üìÑ Configuraci√≥n de audio encontrada en direwolf.conf');
            }
        }
        
        // Iniciar Direwolf con audio
        console.log('\n3. Iniciando Direwolf con audio real...');
        console.log('   ‚ö†Ô∏è  IMPORTANTE: Conecta auriculares o altavoces para escuchar');
        console.log('   ‚ö†Ô∏è  IMPORTANTE: Configura micr√≥fono para recepci√≥n');
        
        const direwolfStarted = await direwolf.start();
        console.log(`   Direwolf iniciado: ${direwolfStarted ? '‚úÖ S√ç' : '‚ùå NO'}`);
        
        if (!direwolfStarted) {
            throw new Error('Direwolf no se pudo iniciar con audio real');
        }
        
        // Esperar a que se estabilice
        console.log('\n4. Esperando estabilizaci√≥n del sistema de audio...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // Verificar puertos
        console.log('\n5. Verificando puertos TNC...');
        const portStatus = await direwolf.testPorts();
        console.log(`   Puerto KISS 8001: ${portStatus.kiss ? '‚úÖ ABIERTO' : '‚ùå CERRADO'}`);
        console.log(`   Puerto AGW 8000: ${portStatus.agw ? '‚úÖ ABIERTO' : '‚ùå CERRADO'}`);
        
        if (!portStatus.kiss) {
            throw new Error('Puerto KISS no est√° disponible');
        }
        
        // Inicializar APRS
        console.log('\n6. Inicializando m√≥dulo APRS...');
        aprs = new APRS(audio);
        
        // Configurar eventos de monitoreo
        aprs.on('tnc_connected', () => {
            console.log('   üîó EVENTO: TNC conectado');
        });
        
        aprs.on('position_received', (position) => {
            console.log('   üìç POSICI√ìN RECIBIDA:', position.callsign, '@', position.lat, position.lon);
            console.log('   üìù Comentario:', position.comment || 'Sin comentario');
        });
        
        aprs.on('beacon_sent', (beacon) => {
            console.log('   üì§ BEACON ENVIADO:', beacon.callsign, 'a las', beacon.timestamp.toLocaleTimeString());
        });
        
        const aprsInitialized = await aprs.initialize();
        console.log(`   APRS inicializado: ${aprsInitialized ? '‚úÖ S√ç' : '‚ùå NO'}`);
        
        if (aprsInitialized) {
            const aprsStarted = await aprs.start();
            console.log(`   APRS iniciado: ${aprsStarted ? '‚úÖ S√ç' : '‚ùå NO'}`);
            
            // Esperar conexi√≥n TNC
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            const status = aprs.getStatus();
            console.log(`   TNC conectado: ${status.tncConnected ? '‚úÖ S√ç' : '‚ùå NO'}`);
            
            if (status.tncConnected) {
                // Prueba de transmisi√≥n
                console.log('\n7. üîä PRUEBA DE TRANSMISI√ìN DE AUDIO üîä');
                console.log('   ‚ö†Ô∏è  ¬°ATENCI√ìN! El siguiente beacon se transmitir√° por AUDIO');
                console.log('   üéß Escucha los auriculares/altavoces');
                console.log('   üîä Deber√≠as escuchar tonos AFSK a 1200 baudios');
                console.log('   ‚è±Ô∏è  Enviando beacon en 3 segundos...');
                
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                try {
                    console.log('   üì§ ¬°ENVIANDO BEACON POR AUDIO AHORA!');
                    await aprs.sendBeacon();
                    console.log('   ‚úÖ Beacon enviado - ¬øEscuchaste los tonos APRS?');
                } catch (error) {
                    console.log('   ‚ùå Error enviando beacon:', error.message);
                }
                
                // Prueba de recepci√≥n
                console.log('\n8. üé§ PRUEBA DE RECEPCI√ìN DE AUDIO üé§');
                console.log('   ‚ö†Ô∏è  INSTRUCCIONES PARA PROBAR RECEPCI√ìN:');
                console.log('   1. Usa otro equipo APRS o smartphone con app APRS');
                console.log('   2. Config√∫ralo para transmitir por audio cerca del micr√≥fono');
                console.log('   3. Env√≠a una posici√≥n APRS');
                console.log('   4. El sistema deber√≠a decodificarla autom√°ticamente');
                console.log();
                console.log('   üéß Monitoreando recepci√≥n por 60 segundos...');
                console.log('   ‚è≥ Esperando se√±ales APRS en el micr√≥fono...');
                
                let countdown = 12; // 60 segundos en intervalos de 5
                const monitor = setInterval(() => {
                    const currentStatus = aprs.getStatus();
                    console.log(`   ‚è±Ô∏è  ${countdown * 5}s restantes - Posiciones recibidas: ${currentStatus.stats.positionsReceived}`);
                    countdown--;
                    
                    if (countdown <= 0) {
                        clearInterval(monitor);
                    }
                }, 5000);
                
                await new Promise(resolve => setTimeout(resolve, 60000));
                
                // Resultado final
                console.log('\n9. üìä RESULTADO DE PRUEBAS DE AUDIO');
                const finalStatus = aprs.getStatus();
                
                console.log('   üì§ Transmisi√≥n:');
                console.log(`      Beacons enviados: ${finalStatus.stats.beaconsSent}`);
                console.log(`      ¬øEscuchaste tonos AFSK?: ${finalStatus.stats.beaconsSent > 0 ? '‚úÖ Deber√≠a haber sonado' : '‚ùå No se envi√≥'}`);
                
                console.log('   üì• Recepci√≥n:');
                console.log(`      Posiciones recibidas: ${finalStatus.stats.positionsReceived}`);
                console.log(`      Estado micr√≥fono: ${finalStatus.stats.positionsReceived > 0 ? '‚úÖ Funciona' : '‚ö†Ô∏è Sin se√±ales o sin micr√≥fono'}`);
                
                if (finalStatus.positions.recent.length > 0) {
                    console.log('   üìç √öltimas posiciones decodificadas:');
                    finalStatus.positions.recent.forEach((pos, i) => {
                        console.log(`      ${i+1}. ${pos.callsign}: ${pos.lat.toFixed(4)}, ${pos.lon.toFixed(4)}`);
                    });
                }
            }
        }
        
        console.log('\nüéØ === DIAGN√ìSTICO FINAL ===');
        const finalStatus = aprs ? aprs.getStatus() : { tncConnected: false, stats: { beaconsSent: 0, positionsReceived: 0 } };
        
        if (finalStatus.tncConnected) {
            console.log('‚úÖ SISTEMA APRS CON AUDIO REAL FUNCIONAL');
            console.log('   üéµ Audio configurado correctamente');
            console.log('   üì° TNC conectado y operativo');
            console.log('   üîä Transmisi√≥n por altavoces/auriculares');
            console.log('   üé§ Recepci√≥n por micr√≥fono');
            
            if (finalStatus.stats.beaconsSent > 0) {
                console.log('   üì§ Transmisi√≥n APRS: ‚úÖ FUNCIONA');
            } else {
                console.log('   üì§ Transmisi√≥n APRS: ‚ö†Ô∏è No probada');
            }
            
            if (finalStatus.stats.positionsReceived > 0) {
                console.log('   üì• Recepci√≥n APRS: ‚úÖ FUNCIONA');
            } else {
                console.log('   üì• Recepci√≥n APRS: ‚ö†Ô∏è Sin se√±ales recibidas');
            }
        } else {
            console.log('‚ùå SISTEMA APRS CON PROBLEMAS');
            console.log('   Verifica configuraci√≥n de audio');
        }

        return finalStatus.tncConnected;

    } catch (error) {
        console.error('\n‚ùå === ERROR EN TEST ===');
        console.error('Error:', error.message);
        console.error('Stack:', error.stack);
        return false;
        
    } finally {
        // Limpiar
        console.log('\nüßπ Limpiando recursos...');
        
        try {
            if (aprs) {
                aprs.stop();
                aprs.destroy();
                console.log('‚úÖ APRS detenido');
            }
            
            if (direwolf) {
                direwolf.stop();
                console.log('‚úÖ Direwolf detenido');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error limpiando:', error.message);
        }
        
        console.log('üèÅ Test finalizado\n');
    }
}

// Ejecutar test si se llama directamente
if (require.main === module) {
    testAPRSAudio()
        .then(success => {
            if (success) {
                console.log('üéØ RESULTADO: ¬°Sistema APRS con audio real funcionando!');
                console.log('üîä La transmisi√≥n deber√≠a escucharse por altavoces');
                console.log('üé§ La recepci√≥n funciona por micr√≥fono');
                process.exit(0);
            } else {
                console.log('‚ùå RESULTADO: Problemas con audio APRS');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('Error fatal:', error.message);
            process.exit(1);
        });
}

module.exports = testAPRSAudio;