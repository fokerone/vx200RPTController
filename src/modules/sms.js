const fs = require('fs');
const path = require('path');

class SMS {
    constructor(audioManager) {
        this.audioManager = audioManager;
        this.config = {
            enabled: true,
            provider: 'twilio', // 'twilio', 'aws', 'local'
            recordingDuration: 15, // segundos para grabar mensaje
            maxMessageLength: 160,
            // Configuraci√≥n Twilio (ejemplo)
            accountSid: process.env.TWILIO_ACCOUNT_SID,
            authToken: process.env.TWILIO_AUTH_TOKEN,
            fromNumber: process.env.TWILIO_FROM_NUMBER
        };
        
        this.currentSession = null;
        this.sessionState = 'idle'; // 'idle', 'getting_number', 'recording_message', 'confirming'
        this.lastProcessedSequence = '';
        this.processing = false;
        
        console.log('üì± M√≥dulo SMS inicializado');
    }

    /**
     * Ejecutar cuando se recibe comando DTMF *3
     */
    async execute(command) {
        console.log(`üìû SMS ejecutado por comando: ${command}`);
        
        if (!this.config.enabled) {
            await this.audioManager.speak('M√≥dulo de mensajer√≠a deshabilitado');
            return;
        }

        if (this.sessionState !== 'idle') {
            await this.audioManager.speak('Sesi√≥n de mensajer√≠a ya activa');
            return;
        }

        try {
            await this.startSMSSession();
        } catch (error) {
            console.error('‚ùå Error en SMS:', error);
            await this.audioManager.speak('Error en el sistema de mensajer√≠a');
            this.resetSession();
        }
    }

    /**
     * Iniciar sesi√≥n de SMS
     */
    async startSMSSession() {
        this.currentSession = {
            phoneNumber: '',
            message: '',
            audioFile: null,
            timestamp: new Date()
        };
        
        console.log('üì± Iniciando sesi√≥n SMS');
        
        // Instrucciones iniciales
        await this.audioManager.speak(
            'Sistema de mensajer√≠a activado.terminando con asterisco.'
        );
        
        this.sessionState = 'getting_number';
        this.lastProcessedSequence = ''; // Reset
        
        console.log('üìû Esperando n√∫mero de tel√©fono...');
    }

    /**
     * Procesar DTMF durante sesi√≥n SMS
     */
    async processDTMF(sequence) {
        // Evitar procesar la misma secuencia dos veces
        if (sequence === this.lastProcessedSequence) {
            console.log('‚ö†Ô∏è  Secuencia ya procesada, ignorando');
            return true;
        }
        
        console.log(`üìû Nueva secuencia SMS: ${sequence} (estado: ${this.sessionState})`);
        this.lastProcessedSequence = sequence;
        
        switch (this.sessionState) {
            case 'getting_number':
                return await this.processNumberSequence(sequence);
            
            case 'confirming':
                return await this.processConfirmationSequence(sequence);
                
            case 'recording_message':
                // Durante grabaci√≥n, ignorar DTMF
                console.log('üéôÔ∏è  Grabando mensaje, DTMF ignorado');
                return true;
            
            default:
                return false;
        }
    }

    /**
     * Procesar secuencia para n√∫mero de tel√©fono
     */
    async processNumberSequence(sequence) {
        if (this.processing) {
            console.log('‚ö†Ô∏è  Ya procesando, ignorando');
            return true;
        }
        
        this.processing = true;
        
        try {
            if (sequence.endsWith('*')) {
                // Secuencia completa del n√∫mero
                const number = sequence.slice(0, -1); // Quitar el asterisco
                
                console.log(`üì± Evaluando n√∫mero: "${number}" (longitud: ${number.length})`);
                
                if (number.length >= 8 && /^[0-9]+$/.test(number)) {
                    this.currentSession.phoneNumber = number;
                    console.log(`‚úÖ N√∫mero aceptado: ${this.currentSession.phoneNumber}`);
                    
                    await this.audioManager.speak(
                        `N√∫mero ${this.currentSession.phoneNumber} confirmado. Grabe su mensaje despu√©s del tono.`
                    );
                    
                    await this.delay(1000);
                    await this.recordMessage();
                    
                } else {
                    console.log(`‚ùå N√∫mero inv√°lido: muy corto o contiene caracteres no num√©ricos`);
                    await this.audioManager.speak('N√∫mero inv√°lido. Debe tener al menos 8 d√≠gitos. Reintente.');
                    this.processing = false;
                }
                
            } else if (sequence === '#') {
                // Cancelar operaci√≥n
                console.log('üö´ Operaci√≥n cancelada por #');
                await this.audioManager.speak('Operaci√≥n cancelada');
                this.resetSession();
                
            } else if (/^[0-9]+$/.test(sequence)) {
                // Secuencia solo num√©rica, esperando m√°s d√≠gitos o asterisco
                console.log(`üìû N√∫mero parcial: ${sequence} - Esperando asterisco para finalizar`);
                this.processing = false;
                
            } else {
                // Secuencia inv√°lida
                console.log(`‚ùå Secuencia inv√°lida para n√∫mero: ${sequence}`);
                await this.audioManager.speak('Secuencia inv√°lida. Use solo n√∫meros y asterisco.');
                this.processing = false;
            }
            
        } catch (error) {
            console.error('‚ùå Error procesando n√∫mero:', error);
            this.processing = false;
        }
        
        return true;
    }

    /**
     * Procesar confirmaci√≥n
     */
    async processConfirmationSequence(sequence) {
        console.log(`üìû Procesando confirmaci√≥n: ${sequence}`);
        
        if (sequence === '1') {
            console.log('‚úÖ Confirmaci√≥n para enviar SMS');
            await this.sendSMS();
        } else if (sequence === '2') {
            console.log('üö´ SMS cancelado por usuario');
            await this.audioManager.speak('Mensaje cancelado');
            this.resetSession();
        } else {
            console.log(`‚ö†Ô∏è  Confirmaci√≥n inv√°lida: ${sequence} - Se esperaba 1 o 2`);
            await this.audioManager.speak('Presione 1 para enviar o 2 para cancelar');
        }
        
        return true;
    }

    /**
     * Grabar mensaje de voz
     */
    async recordMessage() {
        this.sessionState = 'recording_message';
        this.processing = false; // Permitir DTMF durante grabaci√≥n si es necesario
        
        console.log(`üéôÔ∏è  Simulando grabaci√≥n de mensaje por ${this.config.recordingDuration} segundos...`);
        
        try {
            // Simular tiempo de grabaci√≥n
            await this.delay(3000); // 3 segundos para prueba
            
            // Simular transcripci√≥n
            const simulatedMessages = [
                "Hola, soy LU5MCD. Te env√≠o saludos desde la repetidora.",
                "Mensaje de prueba desde el sistema de radio.",
                "Confirmando recepci√≥n de tu se√±al.",
                "Saludos cordiales desde Mendoza.",
                "Mensaje autom√°tico del sistema de radio amateur."
            ];
            
            this.currentSession.message = simulatedMessages[
                Math.floor(Math.random() * simulatedMessages.length)
            ];
            
            console.log(`üìù Mensaje simulado: ${this.currentSession.message}`);
            
            await this.confirmMessage();
            
        } catch (error) {
            console.error('‚ùå Error en grabaci√≥n:', error);
            await this.audioManager.speak('Error grabando mensaje');
            this.resetSession();
        }
    }

    /**
     * Confirmar mensaje antes de enviar
     */
    async confirmMessage() {
        this.sessionState = 'confirming';
        this.lastProcessedSequence = ''; // Reset para nueva confirmaci√≥n
        
        const mensaje = `Mensaje grabado: ${this.currentSession.message}. Destino: ${this.currentSession.phoneNumber}. Presione 1 para enviar, 2 para cancelar.`;
        
        console.log('üì± Solicitando confirmaci√≥n...');
        await this.audioManager.speak(mensaje);
        
        console.log('‚è≥ Esperando confirmaci√≥n (1=enviar, 2=cancelar)...');
    }

    /**
     * Enviar SMS
     */
    async sendSMS() {
        console.log('üì§ Iniciando env√≠o de SMS...');
        await this.audioManager.speak('Enviando mensaje, por favor espere');
        
        try {
            // Simular env√≠o con delay
            await this.delay(2000);
            
            // Log del "env√≠o"
            console.log('üì® === SMS ENVIADO ===');
            console.log(`üì± Destino: ${this.currentSession.phoneNumber}`);
            console.log(`üìù Mensaje: ${this.currentSession.message}`);
            console.log(`üïê Hora: ${this.currentSession.timestamp.toLocaleString()}`);
            console.log('===================');
            
            await this.audioManager.speak('Mensaje enviado exitosamente');
            
        } catch (error) {
            console.error('‚ùå Error enviando SMS:', error);
            await this.audioManager.speak('Error enviando mensaje');
        } finally {
            this.resetSession();
        }
    }

    /**
     * Configurar m√≥dulo
     */
    configure(newConfig) {
        this.config = { ...this.config, ...newConfig };
        console.log('‚öôÔ∏è  SMS configurado:', newConfig);
    }

    /**
     * Obtener estado actual
     */
    getStatus() {
        return {
            enabled: this.config.enabled,
            sessionState: this.sessionState,
            currentSession: this.currentSession ? {
                phoneNumber: this.currentSession.phoneNumber,
                hasMessage: !!this.currentSession.message,
                timestamp: this.currentSession.timestamp
            } : null,
            hasCredentials: !!(this.config.accountSid && this.config.authToken),
            lastProcessedSequence: this.lastProcessedSequence
        };
    }

    /**
     * Reset completo de la sesi√≥n
     */
    resetSession() {
        console.log('üîÑ Reseteando sesi√≥n SMS...');
        
        this.currentSession = null;
        this.sessionState = 'idle';
        this.lastProcessedSequence = '';
        this.processing = false;
        
        console.log('‚úÖ Sesi√≥n SMS reiniciada');
    }

    /**
     * Delay helper
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Destructor
     */
    destroy() {
        this.resetSession();
        console.log('üóëÔ∏è  M√≥dulo SMS destruido');
    }
}

module.exports = SMS;