const fs = require('fs');
const path = require('path');
const { SMS_STATES, VALIDATION, ERROR_MESSAGES } = require('../constants');
const { delay, createLogger, validatePhoneNumber, generateSessionId, sanitizeTextForTTS } = require('../utils');

class SMS {
    constructor(audioManager) {
        this.audioManager = audioManager;
        this.logger = createLogger('[SMS]');
        
        this.config = {
            enabled: true,
            provider: 'twilio',
            recordingDuration: VALIDATION.MAX_RECORDING_DURATION,
            maxMessageLength: VALIDATION.MAX_SMS_LENGTH,
            // Configuraci√≥n segura desde variables de entorno
            accountSid: process.env.TWILIO_ACCOUNT_SID || null,
            authToken: process.env.TWILIO_AUTH_TOKEN || null,
            fromNumber: process.env.TWILIO_FROM_NUMBER || null
        };
        
        this.currentSession = null;
        this.sessionState = SMS_STATES.IDLE;
        this.lastProcessedSequence = '';
        this.processing = false;
        this.sessionId = null;
        
        this.logger.info('M√≥dulo SMS inicializado');
    }

    /**
     * Ejecutar cuando se recibe comando DTMF *3
     */
    async execute(command) {
        this.logger.info(`Ejecutado por comando: ${command}`);
        
        if (!this.config.enabled) {
            this.logger.warn('M√≥dulo deshabilitado');
            await this.audioManager.speak(sanitizeTextForTTS('M√≥dulo de mensajer√≠a deshabilitado'));
            return;
        }

        if (this.sessionState !== SMS_STATES.IDLE) {
            this.logger.warn(`Sesi√≥n ya activa en estado: ${this.sessionState}`);
            await this.audioManager.speak(sanitizeTextForTTS('Sesi√≥n de mensajer√≠a ya activa'));
            return;
        }

        try {
            await this.startSMSSession();
        } catch (error) {
            this.logger.error('Error ejecutando SMS:', error.message);
            await this.audioManager.speak(sanitizeTextForTTS(ERROR_MESSAGES.TRANSMISSION_ERROR));
            this.resetSession();
        }
    }

    /**
     * Iniciar sesi√≥n de SMS
     */
    async startSMSSession() {
        this.sessionId = generateSessionId();
        this.currentSession = {
            id: this.sessionId,
            phoneNumber: '',
            message: '',
            audioFile: null,
            timestamp: new Date(),
            attempts: 0
        };
        
        this.logger.info(`Iniciando sesi√≥n SMS [${this.sessionId}]`);
        
        // Instrucciones iniciales
        const instructions = sanitizeTextForTTS(
            'Sistema de mensajer√≠a activado. Ingrese el n√∫mero de tel√©fono terminando con asterisco.'
        );
        await this.audioManager.speak(instructions);
        
        this.sessionState = SMS_STATES.GETTING_NUMBER;
        this.lastProcessedSequence = '';
        
        this.logger.info('Esperando n√∫mero de tel√©fono...');
    }

    /**
     * Procesar DTMF durante sesi√≥n SMS
     */
    async processDTMF(sequence) {
        // Evitar procesar la misma secuencia dos veces
        if (sequence === this.lastProcessedSequence) {
            this.logger.debug('Secuencia ya procesada, ignorando');
            return true;
        }
        
        this.logger.info(`Nueva secuencia: ${sequence} (estado: ${this.sessionState})`);
        this.lastProcessedSequence = sequence;
        
        switch (this.sessionState) {
            case SMS_STATES.GETTING_NUMBER:
                return await this.processNumberSequence(sequence);
            
            case SMS_STATES.CONFIRMING:
                return await this.processConfirmationSequence(sequence);
                
            case SMS_STATES.RECORDING_MESSAGE:
                this.logger.debug('Grabando mensaje, DTMF ignorado');
                return true;
            
            default:
                this.logger.warn(`Estado inv√°lido para procesar DTMF: ${this.sessionState}`);
                return false;
        }
    }

    /**
     * Procesar secuencia para n√∫mero de tel√©fono
     */
    async processNumberSequence(sequence) {
        if (this.processing) {
            this.logger.debug('Ya procesando, ignorando');
            return true;
        }
        
        this.processing = true;
        
        try {
            if (sequence.endsWith('*')) {
                const number = sequence.slice(0, -1);
                this.logger.info(`Evaluando n√∫mero: "${number}" (longitud: ${number.length})`);
                
                const validation = validatePhoneNumber(number);
                
                if (validation.valid) {
                    this.currentSession.phoneNumber = validation.number;
                    this.logger.info(`N√∫mero aceptado: ${this.currentSession.phoneNumber}`);
                    
                    const confirmMessage = sanitizeTextForTTS(
                        `N√∫mero ${this.currentSession.phoneNumber} confirmado. Grabe su mensaje despu√©s del tono.`
                    );
                    await this.audioManager.speak(confirmMessage);
                    
                    await delay(1000);
                    await this.recordMessage();
                    
                } else {
                    this.logger.warn(`N√∫mero inv√°lido: ${validation.message}`);
                    await this.audioManager.speak(sanitizeTextForTTS(ERROR_MESSAGES.INVALID_PHONE_NUMBER));
                    this.processing = false;
                }
                
            } else if (sequence === '#') {
                this.logger.info('Operaci√≥n cancelada por usuario (#)');
                await this.audioManager.speak(sanitizeTextForTTS('Operaci√≥n cancelada'));
                this.resetSession();
                
            } else if (/^[0-9]+$/.test(sequence)) {
                this.logger.debug(`N√∫mero parcial: ${sequence} - Esperando asterisco`);
                this.processing = false;
                
            } else {
                this.logger.warn(`Secuencia inv√°lida: ${sequence}`);
                await this.audioManager.speak(sanitizeTextForTTS('Secuencia inv√°lida. Use solo n√∫meros y asterisco.'));
                this.processing = false;
            }
            
        } catch (error) {
            this.logger.error('Error procesando n√∫mero:', error.message);
            this.processing = false;
        }
        
        return true;
    }

    /**
     * Procesar confirmaci√≥n
     */
    async processConfirmationSequence(sequence) {
        console.log(`üìû Procesando confirmaci√≥n: ${sequence}`);
        
        if (sequence === '1') {
            console.log('‚úÖ Confirmaci√≥n para enviar SMS');
            await this.sendSMS();
        } else if (sequence === '2') {
            console.log('üö´ SMS cancelado por usuario');
            await this.audioManager.speak('Mensaje cancelado');
            this.resetSession();
        } else {
            console.log(`‚ö†Ô∏è  Confirmaci√≥n inv√°lida: ${sequence} - Se esperaba 1 o 2`);
            await this.audioManager.speak('Presione 1 para enviar o 2 para cancelar');
        }
        
        return true;
    }

    /**
     * Grabar mensaje de voz
     */
    async recordMessage() {
        this.sessionState = SMS_STATES.RECORDING_MESSAGE;
        this.processing = false;
        
        this.logger.info(`Simulando grabaci√≥n por ${this.config.recordingDuration} segundos...`);
        
        try {
            // Simular tiempo de grabaci√≥n (reducido para testing)
            await delay(3000);
            
            // Simular transcripci√≥n con mensajes variados
            const simulatedMessages = [
                "Hola, soy LU5MCD. Te env√≠o saludos desde la repetidora.",
                "Mensaje de prueba desde el sistema de radio.",
                "Confirmando recepci√≥n de tu se√±al.",
                "Saludos cordiales desde Mendoza.",
                "Mensaje autom√°tico del sistema de radio amateur."
            ];
            
            this.currentSession.message = sanitizeTextForTTS(
                simulatedMessages[Math.floor(Math.random() * simulatedMessages.length)]
            );
            
            this.logger.info(`Mensaje grabado: ${this.currentSession.message}`);
            
            await this.confirmMessage();
            
        } catch (error) {
            this.logger.error('Error en grabaci√≥n:', error.message);
            await this.audioManager.speak(sanitizeTextForTTS(ERROR_MESSAGES.RECORDING_ERROR));
            this.resetSession();
        }
    }

    /**
     * Confirmar mensaje antes de enviar
     */
    async confirmMessage() {
        this.sessionState = SMS_STATES.CONFIRMING;
        this.lastProcessedSequence = '';
        
        const mensaje = sanitizeTextForTTS(
            `Mensaje grabado: ${this.currentSession.message}. Destino: ${this.currentSession.phoneNumber}. Presione 1 para enviar, 2 para cancelar.`
        );
        
        this.logger.info('Solicitando confirmaci√≥n...');
        await this.audioManager.speak(mensaje);
        
        this.logger.info('Esperando confirmaci√≥n (1=enviar, 2=cancelar)...');
    }

    /**
     * Enviar SMS
     */
    async sendSMS() {
        console.log('üì§ Iniciando env√≠o de SMS...');
        await this.audioManager.speak('Enviando mensaje, por favor espere');
        
        try {
            // Simular env√≠o con delay
            await this.delay(2000);
            
            // Log del "env√≠o"
            console.log('üì® === SMS ENVIADO ===');
            console.log(`üì± Destino: ${this.currentSession.phoneNumber}`);
            console.log(`üìù Mensaje: ${this.currentSession.message}`);
            console.log(`üïê Hora: ${this.currentSession.timestamp.toLocaleString()}`);
            console.log('===================');
            
            await this.audioManager.speak('Mensaje enviado exitosamente');
            
        } catch (error) {
            console.error('‚ùå Error enviando SMS:', error);
            await this.audioManager.speak('Error enviando mensaje');
        } finally {
            this.resetSession();
        }
    }

    /**
     * Configurar m√≥dulo
     */
    configure(newConfig) {
        this.config = { ...this.config, ...newConfig };
        console.log('‚öôÔ∏è  SMS configurado:', newConfig);
    }

    /**
     * Obtener estado actual
     */
    getStatus() {
        return {
            enabled: this.config.enabled,
            sessionState: this.sessionState,
            currentSession: this.currentSession ? {
                phoneNumber: this.currentSession.phoneNumber,
                hasMessage: !!this.currentSession.message,
                timestamp: this.currentSession.timestamp
            } : null,
            hasCredentials: !!(this.config.accountSid && this.config.authToken),
            lastProcessedSequence: this.lastProcessedSequence
        };
    }

    /**
     * Reset completo de la sesi√≥n
     */
    resetSession() {
        const sessionId = this.sessionId || 'unknown';
        this.logger.info(`Reseteando sesi√≥n SMS [${sessionId}]`);
        
        this.currentSession = null;
        this.sessionState = SMS_STATES.IDLE;
        this.lastProcessedSequence = '';
        this.processing = false;
        this.sessionId = null;
        
        this.logger.info('Sesi√≥n SMS reiniciada');
    }

    /**
     * Destructor
     */
    destroy() {
        this.resetSession();
        this.logger.info('M√≥dulo SMS destruido');
    }
}

module.exports = SMS;