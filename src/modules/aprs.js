const EventEmitter = require('events');
const fs = require('fs');
const path = require('path');
const { createLogger } = require('../logging/Logger');

/**
 * M√≥dulo APRS para VX200 RPT Controller
 * Funcionalidades:
 * - Beacon del repetidor con ubicaci√≥n fija
 * - Recepci√≥n y logging de beacons APRS
 * - Interface web para visualizaci√≥n en mapa
 */
class APRS extends EventEmitter {
    constructor(audioManager) {
        super();
        this.logger = createLogger('[APRS]');
        this.audio = audioManager;
        
        // Estado del m√≥dulo
        this.isRunning = false;
        this.isInitialized = false;
        
        // Configuraci√≥n APRS desde ConfigManager
        const { Config } = require('../config');
        this.config = {
            callsign: Config.aprs.callsign,
            location: Config.aprs.location,
            beacon: {
                enabled: Config.aprs.beacon.enabled,
                interval: Config.aprs.beacon.interval * 60 * 1000, // convertir a ms
                offset: 7.5 * 60 * 1000, // 7.5 minutos de offset para evitar choque con baliza
                comment: Config.aprs.beacon.comment,
                symbol: Config.aprs.beacon.symbol
            },
            direwolf: {
                configPath: path.join(__dirname, '../../config/direwolf.conf'),
                kissPort: Config.aprs.direwolf.kissPort,
                agwPort: Config.aprs.direwolf.agwPort
            }
        };
        
        // Base de datos de posiciones recibidas (callsign -> array de posiciones hist√≥ricas)
        this.receivedPositions = new Map();
        this.logFile = path.join(__dirname, '../../logs/aprs-positions.json');
        
        // Conexi√≥n TNC
        this.tncConnection = null;
        this.kissEndpoint = null;
        
        // Timers
        this.beaconTimer = null;
        
        // Estad√≠sticas
        this.stats = {
            beaconsSent: 0,
            positionsReceived: 0,
            lastBeacon: null,
            lastPosition: null,
            startTime: null
        };
    }

    /**
     * Inicializar conexi√≥n con Direwolf TNC
     */
    async initialize() {
        if (this.isInitialized) {
            this.logger.warn('APRS ya est√° inicializado');
            return true;
        }

        try {
            // Inicializando m√≥dulo APRS silenciosamente
            
            // Verificar que existe el archivo de configuraci√≥n de Direwolf
            if (!fs.existsSync(this.config.direwolf.configPath)) {
                throw new Error(`No se encuentra configuraci√≥n de Direwolf: ${this.config.direwolf.configPath}`);
            }
            
            // Crear directorio de logs si no existe
            const logsDir = path.dirname(this.logFile);
            if (!fs.existsSync(logsDir)) {
                fs.mkdirSync(logsDir, { recursive: true });
            }
            
            // Cargar posiciones guardadas
            await this.loadSavedPositions();
            
            // Cargar posiciones desde log CSV de Direwolf
            await this.loadFromDirewolfLog();
            
            // Inicializar conexi√≥n KISS TNC
            await this.initializeKISSConnection();
            
            this.isInitialized = true;
            this.stats.startTime = new Date();
            
            this.logger.info('APRS iniciado - Beacon cada 15min, KISS puerto 8001');
            return true;
            
        } catch (error) {
            this.logger.error('Error inicializando APRS:', error.message);
            return false;
        }
    }

    /**
     * Inicializar conexi√≥n KISS TNC con TCP directo (temporal debug)
     */
    async initializeKISSConnection() {
        try {
            const net = require('net');
            
            // Crear conexi√≥n TCP directa al puerto KISS
            this.kissSocket = new net.Socket();
            this.kissSocket.setTimeout(0); // Sin timeout
            
            this.kissSocket.on('connect', () => {
                this.logger.info('üîó Conectado a Direwolf KISS TNC (TCP directo)');
                this.tncConnection = true;
                this.emit('tnc_connected');
            });
            
            this.kissSocket.on('close', () => {
                this.logger.warn('‚ùå Desconectado de Direwolf KISS TNC');
                this.tncConnection = false;
                this.emit('tnc_disconnected');
            });
            
            this.kissSocket.on('data', (data) => {
                this.logger.info('üì° Datos KISS recibidos:', data.length, 'bytes, hex:', data.toString('hex').substring(0, 100));
                
                // Si recibimos datos, significa que estamos conectados
                if (!this.tncConnection) {
                    this.logger.info('Conexi√≥n TNC detectada por recepci√≥n de datos');
                    this.tncConnection = true;
                    this.emit('tnc_connected');
                }
                
                // Procesar frame KISS (remover header KISS y procesar AX.25)
                this.handleKISSFrame(data);
            });
            
            this.kissSocket.on('error', (error) => {
                this.logger.error('Error en conexi√≥n KISS TCP:', error.message);
                this.tncConnection = false;
                this.emit('tnc_disconnected');
            });
            
            // Conectar al puerto KISS
            this.kissSocket.connect(this.config.direwolf.kissPort, 'localhost');
            
            this.logger.info('Socket KISS TCP configurado para puerto', this.config.direwolf.kissPort);
            
        } catch (error) {
            this.logger.error('Error configurando conexi√≥n KISS:', error.message);
            throw error;
        }
    }

    /**
     * Procesar frame KISS (temporal debug)
     */
    handleKISSFrame(kissData) {
        try {
            // Frame KISS formato: FEND CMD DATA FEND
            // CMD: 0x00 = data frame canal 0
            const FEND = 0xC0;
            
            this.logger.info('üîç Frame KISS raw:', kissData.toString('hex'));
            
            // Buscar inicio de frame (FEND)
            let start = -1;
            let end = -1;
            
            for (let i = 0; i < kissData.length; i++) {
                if (kissData[i] === FEND) {
                    if (start === -1) {
                        start = i;
                    } else {
                        end = i;
                        break;
                    }
                }
            }
            
            if (start !== -1 && end !== -1 && end > start + 2) {
                // Extraer datos AX.25 (omitir FEND y CMD)
                const ax25Data = kissData.slice(start + 2, end);
                this.logger.info('üì¶ Datos AX.25 extra√≠dos:', ax25Data.length, 'bytes');
                
                // Procesar frame AX.25
                this.handleReceivedFrame(ax25Data);
            } else {
                this.logger.warn('‚ö†Ô∏è Frame KISS malformado o incompleto');
            }
            
        } catch (error) {
            this.logger.error('Error procesando frame KISS:', error.message);
        }
    }

    /**
     * Limpiar y mejorar comentario APRS
     */
    cleanComment(rawInfo) {
        if (!rawInfo) return 'APRS Station';
        
        // Remover caracteres de control y no imprimibles, preservando espacios
        let cleaned = rawInfo.replace(/[\x00-\x1F\x7F-\x9F]/g, '').trim();
        
        // Buscar patrones comunes de radio al final del mensaje
        const radioPatterns = [
            { pattern: /Yaesu\s+FT\w*\d*\w*/gi, name: 'Yaesu FTM/FT5D' },
            { pattern: /Kenwood\s+TH?\w*\d*\w*/gi, name: 'Kenwood TH/TM' },
            { pattern: /Icom\s+IC\w*\d*\w*/gi, name: 'Icom IC' },
            { pattern: /Baofeng\s+UV\w*\d*\w*/gi, name: 'Baofeng UV' },
            { pattern: /Motorola\s+\w+/gi, name: 'Motorola' }
        ];
        
        for (const radio of radioPatterns) {
            const matches = cleaned.match(radio.pattern);
            if (matches) {
                // Usar la √∫ltima coincidencia (usualmente al final)
                return matches[matches.length - 1].trim();
            }
        }
        
        // Si no encontramos radio espec√≠fica, buscar otros patrones
        // Patr√≥n para texto despu√©s de "}"
        const afterBrace = cleaned.split('}').pop();
        if (afterBrace && afterBrace.length > 2) {
            const trimmed = afterBrace.trim();
            if (trimmed.length < 50 && !/[^\w\s\-\.]/g.test(trimmed)) {
                return trimmed;
            }
        }
        
        // Buscar palabras reconocibles al final
        const words = cleaned.split(/\s+/).filter(w => w.length > 2);
        const lastWords = words.slice(-3).join(' ');
        
        if (lastWords && lastWords.length < 30) {
            return lastWords;
        }
        
        return 'APRS Mobile';
    }

    /**
     * Obtener s√≠mbolo APRS mejorado con emoji
     */
    getAPRSSymbol(symbolCode) {
        // Mapeo completo de s√≠mbolos APRS basado en especificaci√≥n oficial
        const symbolMap = {
            // Tabla primaria (/)
            '/!': 'üëÆ Polic√≠a/Sheriff',
            '/"': 'üìã Reservado', 
            '/#': 'üîÑ DIGI (centro blanco)',
            '/$': '‚òéÔ∏è Tel√©fono',
            '/%': 'üì° DX Cluster',
            '/&': '‚ö° Gateway HF',
            '/\'': 'üõ©Ô∏è Avi√≥n peque√±o',
            '/(': 'üì° Estaci√≥n satelital m√≥vil',
            '/)': '‚ôø Silla de ruedas',
            '/*': 'üõ∑ Moto de nieve',
            '/+': '‚ù§Ô∏è Cruz Roja',
            '/,': 'üë¶ Boy Scouts',
            '/-': 'üè† Casa QTH (VHF)',
            '/.': '‚ùå X',
            '//': 'üî¥ Punto rojo',
            '/0': '‚≠ï C√≠rculo',
            '/1': '1Ô∏è‚É£ Uno',
            '/2': '2Ô∏è‚É£ Dos', 
            '/3': '3Ô∏è‚É£ Tres',
            '/4': '4Ô∏è‚É£ Cuatro',
            '/5': '5Ô∏è‚É£ Cinco',
            '/6': '6Ô∏è‚É£ Seis',
            '/7': '7Ô∏è‚É£ Siete',
            '/8': '8Ô∏è‚É£ Ocho',
            '/9': '9Ô∏è‚É£ Nueve',
            '/:': 'üî• Fuego',
            '/;': '‚õ∫ Campamento',
            '/<': 'üèçÔ∏è Motocicleta',
            '/=': 'üöÇ Tren',
            '/>': 'üöó Auto',
            '/?': 'üì° Servidor',
            '/@': 'üöÅ Helic√≥ptero',
            '/A': 'üì¶ Caja',
            '/B': 'üí® BBS',
            '/C': '‚õµ Canoa',
            '/D': 'üîß Herramienta',
            '/E': 'üëÅÔ∏è Ojo (eventos)',
            '/F': 'üöí Cami√≥n de bomberos',
            '/G': 'üõ©Ô∏è Planeador',
            '/H': 'üè• Hospital',
            '/I': 'üåê TCP-IP',
            '/J': 'üì° Node',
            '/K': 'üè´ Escuela',
            '/L': 'üí° Laptop/PC',
            '/M': 'üìç Mic-E Repetidor',
            '/N': 'üì° NTS Station',
            '/O': 'üéà Globo',
            '/P': 'üëÆ Polic√≠a',
            '/Q': 'üî∫ TBD',
            '/R': 'üöÅ RV',
            '/S': 'üö¢ Barco',
            '/T': 'üìû Cami√≥n',
            '/U': 'üöå Bus',
            '/V': 'üöê Van',
            '/W': 'üåê Estaci√≥n de agua',
            '/X': 'üöÅ Helic√≥ptero',
            '/Y': '‚õµ Velero',
            '/Z': 'üì± Casa m√≥vil',
            '/[': 'üë§ Humano/Persona',
            '/\\': 'üî∫ Tri√°ngulo DF',
            '/]': 'üìÆ Oficina de correos',
            '/^': '‚úàÔ∏è Avi√≥n',
            '/_': 'üå°Ô∏è Estaci√≥n meteorol√≥gica',
            '/`': 'üöÅ Plato satelital',
            '/a': 'üöë Ambulancia',
            '/b': 'üö≤ Bicicleta',
            '/c': 'üè† Incidente command post',
            '/d': 'üî• Departamento de bomberos',
            '/e': 'üè† Casa (HF)',
            '/f': 'üöí Cami√≥n de bomberos',
            '/g': 'üõ©Ô∏è Planeador',
            '/h': 'üè• Hospital',
            '/i': '‚ÑπÔ∏è Informaci√≥n',
            '/j': 'üöô Jeep',
            '/k': 'üöó Cami√≥n',
            '/l': 'üíª Laptop',
            '/m': 'üìç Mic-E Repetidor',
            '/n': 'üè≠ Estaci√≥n NTS',
            '/o': 'üöó EOC',
            '/p': 'üë§ Perro',
            '/q': 'üè† Grid Square',
            '/r': 'üìª Repetidor',
            '/s': '‚õµ Barco',
            '/t': 'üìû Cami√≥n',
            '/u': 'üöå Bus',
            '/v': 'üöê Van',
            '/w': 'üíß Estaci√≥n de agua',
            '/x': 'üöÅ Helic√≥ptero',
            '/y': '‚õµ Velero',
            '/z': 'üì± Reservado',
            '/|': 'üè† Estaci√≥n TNC Stream',
            '/~': 'üè† Estaci√≥n TNC Stream Switch',
            '/`': 'üì° Mic-E (Kenwood, Yaesu, etc.)',

            // Tabla alternativa (\)
            '\\!': 'üö® Emergencia',
            '\\"': 'üìã Reservado',
            '\\#': 'üîÑ DIGI (overlaid)',
            '\\$': 'üí∞ Banco',
            '\\%': 'üì° DX Cluster',
            '\\&': 'üíé Diamante',
            '\\\'': 'üöÅ Avi√≥n (peque√±o)',
            '\\(': '‚òÅÔ∏è Nube',
            '\\)': '‚ôø Accesible',
            '\\*': '‚ùÑÔ∏è Nieve',
            '\\+': '‚õ™ Iglesia',
            '\\,': 'üë¶ Scout',
            '\\-': 'üèõÔ∏è Casa (HF)',
            '\\.': 'üî¥ Punto',
            '\\/': 'üî∫ Tri√°ngulo',
            '\\0': '‚≠ï C√≠rculo (alt)',
            '\\1': '1Ô∏è‚É£ Uno (alt)',
            '\\2': '2Ô∏è‚É£ Dos (alt)',
            '\\3': '3Ô∏è‚É£ Tres (alt)',
            '\\4': '4Ô∏è‚É£ Cuatro (alt)',
            '\\5': '5Ô∏è‚É£ Cinco (alt)',
            '\\6': '6Ô∏è‚É£ Seis (alt)',
            '\\7': '7Ô∏è‚É£ Siete (alt)',
            '\\8': '8Ô∏è‚É£ Ocho (alt)',
            '\\9': '9Ô∏è‚É£ Nueve (alt)',
            '\\:': 'üî• Fuego (alt)',
            '\\;': '‚õ∫ Campamento (alt)',
            '\\<': 'üèçÔ∏è Motocicleta (alt)',
            '\\=': 'üöÇ Tren (alt)',
            '\\>': 'üöó Auto (alt)',
            '\\?': 'üì° Servidor (alt)',
            '\\@': 'üåÄ Hurac√°n',
            '\\A': 'üì¶ Caja (alt)',
            '\\B': 'üì° Blizzard',
            '\\C': '‚òÅÔ∏è Costa Guard',
            '\\D': 'üå™Ô∏è Tornado',
            '\\E': 'üö® Humo',
            '\\F': 'üå´Ô∏è Niebla',
            '\\G': '‚ùÑÔ∏è Nieve',
            '\\H': 'üå©Ô∏è Tormenta',
            '\\I': '‚õàÔ∏è Lluvia',
            '\\J': '‚ö° Rayos',
            '\\K': 'üå®Ô∏è Granizo',
            '\\L': 'üåü Sol',
            '\\M': 'üìç MARS',
            '\\N': 'üìª Red',
            '\\O': 'üåä Tsunami',
            '\\P': 'üìû Tel√©fono',
            '\\Q': '‚ùì Pregunta',
            '\\R': 'üìª Repetidor (alt)',
            '\\S': '‚õ∞Ô∏è Skyline',
            '\\T': 'üìû Tel√©fono (alt)',
            '\\U': 'üöå Bus (alt)',
            '\\V': 'üöê Van (alt)',
            '\\W': 'üåä Inundaci√≥n',
            '\\X': '‚ö†Ô∏è Peligroso',
            '\\Y': '‚õµ Velero (alt)',
            '\\Z': 'üè† Shelter',
            '\\[': 'üì¶ Caja humana',
            '\\\\': 'üî∫ DF Tri√°ngulo',
            '\\]': 'üìÆ Correo (alt)',
            '\\^': '‚úàÔ∏è Jet',
            '\\_': 'üå°Ô∏è WX Station',
            '\\`': 'üì° Antena'
        };
        
        // Buscar s√≠mbolo exacto primero
        if (symbolMap[symbolCode]) {
            return symbolMap[symbolCode];
        }
        
        // Buscar por segundo car√°cter (s√≠mbolo principal)
        const secondChar = symbolCode ? symbolCode[1] : '';
        for (const [code, description] of Object.entries(symbolMap)) {
            if (code[1] === secondChar) {
                return description;
            }
        }
        
        // Mapeo por caracteres individuales como fallback
        const charMap = {
            'h': 'üè† Casa',
            '-': 'üè† Casa',
            '>': 'üöó Auto',
            'k': 'üöó Auto', 
            'j': 'üöô Jeep',
            's': '‚õµ Barco',
            '^': '‚úàÔ∏è Avi√≥n',
            '[': 'üë§ Persona',
            'b': 'üö≤ Bici',
            'f': 'üöí Bomberos',
            'a': 'üöë Ambulancia',
            'r': 'üìª Radio'
        };
        
        if (charMap[secondChar]) {
            return charMap[secondChar];
        }
        
        return `üìç ${symbolCode || 'Desconocido'}`;
    }

    /**
     * Calcular distancia entre dos coordenadas (f√≥rmula Haversine)
     * @param {number} lat1 - Latitud punto 1
     * @param {number} lon1 - Longitud punto 1  
     * @param {number} lat2 - Latitud punto 2
     * @param {number} lon2 - Longitud punto 2
     * @returns {number} Distancia en kil√≥metros
     */
    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Radio de la Tierra en km
        const dLat = this.toRadians(lat2 - lat1);
        const dLon = this.toRadians(lon2 - lon1);
        const a = 
            Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * 
            Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }

    /**
     * Convertir grados a radianes
     */
    toRadians(degrees) {
        return degrees * (Math.PI/180);
    }

    /**
     * Parser de coordenadas APRS desde el campo info
     * Formato APRS est√°ndar: !DDMM.hhN/DDDMM.hhW o =DDMM.hhN/DDDMM.hhW
     */
    async parseAPRSCoordinates(info) {
        try {
            // Patr√≥n para coordenadas APRS est√°ndar
            // Formato: [!=/]DDMM.hhN/DDDMM.hhW[s√≠mbolo]
            const coordPattern = /[!=\/](\d{4}\.\d{2})([NS]).\s*(\d{5}\.\d{2})([EW])/;
            const match = info.match(coordPattern);
            
            if (match) {
                const [, latStr, latDir, lonStr, lonDir] = match;
                
                // Convertir DDMM.hh a decimal
                const latDeg = parseInt(latStr.substring(0, 2));
                const latMin = parseFloat(latStr.substring(2));
                let lat = latDeg + (latMin / 60);
                if (latDir === 'S') lat = -lat;
                
                const lonDeg = parseInt(lonStr.substring(0, 3));
                const lonMin = parseFloat(lonStr.substring(3));
                let lon = lonDeg + (lonMin / 60);
                if (lonDir === 'W') lon = -lon;
                
                this.logger.info(`üìç Coordenadas parseadas: ${lat.toFixed(6)}, ${lon.toFixed(6)}`);
                return { lat, lon };
            }
            
            // Parser Mic-E - activar para cualquier info que empiece con ` (backtick)
            if (info && info[0] === '`') {
                this.logger.info('üéØ Detectado posible MIC-E, iniciando parser espec√≠fico...');
                const micEResult = await this.parseMicE(info);
                if (micEResult) {
                    this.logger.info(`üìç Coordenadas MIC-E parseadas: ${micEResult.lat.toFixed(6)}, ${micEResult.lon.toFixed(6)}`);
                    return micEResult;
                }
            }
            
            return null;
            
        } catch (error) {
            this.logger.error('Error parseando coordenadas APRS:', error.message);
            return null;
        }
    }

    /**
     * Parser MIC-E - utiliza logs de Direwolf que ya tiene las coordenadas decodificadas
     */
    async parseMicE(info) {
        try {
            // MIC-E siempre requiere leer desde logs de Direwolf
            // porque los datos est√°n en formato binario comprimido
            this.logger.info('üîç Detectado MIC-E, leyendo coordenadas desde logs de Direwolf...');
            return await this.parseFromDirewolfLogs();
            
        } catch (error) {
            this.logger.debug('Error parsing MIC-E:', error.message);
            return null;
        }
    }

    /**
     * Buscar coordenadas en el √∫ltimo log de Direwolf para un timestamp espec√≠fico
     */
    async parseFromDirewolfLogs(targetCallsign = null, targetTimestamp = null) {
        try {
            const fs = require('fs');
            const path = require('path');
            
            // Si tenemos timestamp espec√≠fico, buscar en el log correcto
            let logFile;
            if (targetTimestamp) {
                const targetDate = new Date(targetTimestamp * 1000).toISOString().split('T')[0];
                logFile = path.join(__dirname, '../../logs', `${targetDate}.log`);
            } else {
                // Buscar en el log de hoy por defecto
                const today = new Date().toISOString().split('T')[0];
                logFile = path.join(__dirname, '../../logs', `${today}.log`);
            }
            
            if (!fs.existsSync(logFile)) {
                this.logger.debug('Log de Direwolf no existe:', logFile);
                return null;
            }
            
            const content = fs.readFileSync(logFile, 'utf8');
            const lines = content.trim().split('\n');
            
            // Buscar l√≠neas que contengan coordenadas v√°lidas
            // Si tenemos callsign y timestamp espec√≠ficos, buscar la m√°s cercana
            let bestMatch = null;
            let bestTimeDiff = Infinity;
            
            for (let i = lines.length - 1; i >= 0; i--) {
                const line = lines[i];
                
                if (!line || line.includes('latitude,longitude')) continue;
                
                const fields = line.split(',');
                if (fields.length >= 11) {
                    const utime = parseInt(fields[1]);
                    const source = fields[3];
                    const lat = parseFloat(fields[10]);  // latitude field (index 10)
                    const lon = parseFloat(fields[11]); // longitude field (index 11)
                    
                    // Verificar que las coordenadas sean v√°lidas
                    if (!isNaN(lat) && !isNaN(lon) && lat !== 0 && lon !== 0) {
                        // Si buscamos callsign espec√≠fico
                        if (targetCallsign && source !== targetCallsign) continue;
                        
                        // Si buscamos timestamp espec√≠fico, encontrar el m√°s cercano
                        if (targetTimestamp) {
                            const timeDiff = Math.abs(utime - targetTimestamp);
                            if (timeDiff < bestTimeDiff) {
                                bestTimeDiff = timeDiff;
                                bestMatch = { lat, lon };
                            }
                        } else {
                            // Sin timestamp espec√≠fico, tomar la primera v√°lida (m√°s reciente)
                            this.logger.info(`üìç Coordenadas desde Direwolf log: ${lat.toFixed(6)}, ${lon.toFixed(6)} (${source})`);
                            return { lat, lon };
                        }
                    }
                }
            }
            
            if (bestMatch) {
                this.logger.info(`üìç Coordenadas desde Direwolf log: ${bestMatch.lat.toFixed(6)}, ${bestMatch.lon.toFixed(6)}`);
                return bestMatch;
            }
            
            return null;
            
        } catch (error) {
            this.logger.debug('Error leyendo logs Direwolf:', error.message);
            return null;
        }
    }

    /**
     * Parser b√°sico AX.25 mejorado para comentarios y s√≠mbolos
     */
    async parseBasicAX25(frame) {
        try {
            // Formato AX.25: DEST(7) + SOURCE(7) + PATH(0-56) + CONTROL(1) + PID(1) + INFO
            if (frame.length < 16) return null;
            
            // Extraer callsign source (bytes 7-12, shifted left 1 bit) + SSID
            let callsign = '';
            for (let i = 7; i < 13; i++) {
                const c = String.fromCharCode(frame[i] >> 1);
                if (c !== ' ') callsign += c;
            }
            
            // Extraer SSID desde el byte 13 (bits 7-1, shifted right 1)
            const ssidByte = frame[13];
            const ssid = (ssidByte >> 1) & 0x0F; // Bits 4-1 contienen el SSID
            if (ssid > 0) {
                callsign += `-${ssid}`;
            }
            
            // Buscar info field (despu√©s de 0x03 0xF0)
            let infoStart = -1;
            for (let i = 14; i < frame.length - 1; i++) {
                if (frame[i] === 0x03 && frame[i + 1] === 0xF0) {
                    infoStart = i + 2;
                    break;
                }
            }
            
            if (infoStart === -1) {
                this.logger.info('‚ö° Info field no encontrado - usando datos de Direwolf directamente');
                
                // Fallback: usar directamente los logs de Direwolf que ya tienen las coordenadas
                const coordinates = await this.parseFromDirewolfLogs();
                if (coordinates) {
                    return {
                        source: callsign,
                        aprs: {
                            position: coordinates,
                            symbol: '/-',
                            comment: 'MIC-E (Direwolf)',
                            timestamp: new Date()
                        }
                    };
                }
                return null;
            }
            
            // Extraer informaci√≥n completa del packet
            const infoBuffer = frame.slice(infoStart);
            const info = infoBuffer.toString('ascii', 0, Math.min(100, infoBuffer.length));
            
            // Para cualquier frame APRS, usar coordenadas del log de Direwolf
            const coordinates = await this.parseFromDirewolfLogs(callsign);
            
            // Solo procesar si tenemos coordenadas v√°lidas
            if (!coordinates) {
                this.logger.warn(`No se encontraron coordenadas v√°lidas para ${callsign}, omitiendo`);
                return null;
            }
            
            const cleanedComment = this.cleanComment(info);
            
            // Buscar s√≠mbolo en el packet APRS (generalmente despu√©s de coordenadas)
            let symbolCode = '/-';
            const symbolMatch = info.match(/[\/\\](.)/);
            if (symbolMatch) {
                symbolCode = symbolMatch[0];
            }
            
            this.logger.info('üìä Callsign:', callsign, 'Comentario limpio:', cleanedComment, 'S√≠mbolo:', symbolCode);
            
            // Crear estructura APRS exitosa
            return {
                source: callsign,
                aprs: {
                    position: coordinates,
                    comment: cleanedComment || 'APRS via Direwolf',
                    symbol: this.getAPRSSymbol(symbolCode),
                    rawSymbol: symbolCode,
                    timestamp: new Date()
                }
            };
            
        } catch (error) {
            this.logger.error('Error parsing AX.25:', error.message);
            return null;
        }
    }

    /**
     * Manejar frame APRS recibido
     */
    async handleReceivedFrame(frame) {
        try {
            this.logger.info('üîç Procesando frame APRS...');
            
            // Parser AX.25 b√°sico
            const parsed = await this.parseBasicAX25(frame);
            
            this.logger.info('üìù Frame parseado:', parsed ? '√âXITO' : 'FALLO');
            if (parsed) {
                this.logger.info('üìã Source:', parsed.source, 'APRS:', !!parsed.aprs, 'Position:', !!(parsed.aprs && parsed.aprs.position));
            }
            
            if (parsed && parsed.aprs && parsed.aprs.position) {
                const existingPositions = this.receivedPositions.get(parsed.source) || [];
                const isNewStation = existingPositions.length === 0;
                
                // Calcular distancia desde la repetidora
                const distanceKm = this.calculateDistance(
                    this.config.location.lat,
                    this.config.location.lon,
                    parsed.aprs.position.lat,
                    parsed.aprs.position.lon
                );

                // Verificar si es una nueva ubicaci√≥n (diferencia > 200 metros)
                const isNewLocation = existingPositions.length === 0 || 
                    !existingPositions.some(pos => {
                        const locDistance = this.calculateDistance(
                            pos.lat, pos.lon,
                            parsed.aprs.position.lat, parsed.aprs.position.lon
                        );
                        return locDistance < 0.2; // 200 metros
                    });

                const position = {
                    callsign: parsed.source,
                    lat: parsed.aprs.position.lat,
                    lon: parsed.aprs.position.lon,
                    timestamp: new Date(),
                    comment: parsed.aprs.comment || '',
                    symbol: parsed.aprs.symbol || '/',
                    lastHeard: new Date(),
                    count: existingPositions.length + 1,
                    firstHeard: isNewStation ? new Date() : existingPositions[0].firstHeard,
                    distance: Math.round(distanceKm * 100) / 100,
                    locationId: Date.now(), // ID √∫nico para esta ubicaci√≥n
                    raw: frame
                };
                
                if (isNewLocation) {
                    // Agregar nueva posici√≥n al historial
                    existingPositions.push(position);
                    this.receivedPositions.set(parsed.source, existingPositions);
                } else {
                    // Actualizar la posici√≥n existente m√°s cercana
                    let closestIndex = 0;
                    let minDistance = Infinity;
                    existingPositions.forEach((pos, index) => {
                        const locDistance = this.calculateDistance(
                            pos.lat, pos.lon,
                            parsed.aprs.position.lat, parsed.aprs.position.lon
                        );
                        if (locDistance < minDistance) {
                            minDistance = locDistance;
                            closestIndex = index;
                        }
                    });
                    existingPositions[closestIndex] = position;
                    this.receivedPositions.set(parsed.source, existingPositions);
                }
                // Incrementar contador para cada packet APRS recibido (para coincidir con logs de Direwolf)
                this.stats.positionsReceived++;
                this.stats.lastPosition = position;
                
                // Log diferenciado para estaciones nuevas vs ubicaciones nuevas
                if (isNewStation) {
                    this.logger.info(`üÜï Nueva estaci√≥n APRS: ${position.callsign} @ ${position.lat.toFixed(4)}, ${position.lon.toFixed(4)} - ${position.distance}km - ${position.comment}`);
                } else if (isNewLocation) {
                    this.logger.info(`üìç Nueva ubicaci√≥n APRS: ${position.callsign} @ ${position.lat.toFixed(4)}, ${position.lon.toFixed(4)} - ${position.distance}km (ubicaci√≥n #${existingPositions.length})`);
                } else {
                    this.logger.info(`üîÑ Actualizaci√≥n APRS: ${position.callsign} @ ${position.lat.toFixed(4)}, ${position.lon.toFixed(4)} - ${position.distance}km`);
                }
                
                // Guardar a archivo
                await this.savePositionToLog(position);
                
                // Emitir evento para panel web
                this.emit('position_received', position);
                
                // Anunciar por voz si est√° configurado
                if (this.config.announcePositions) {
                    await this.announceNewPosition(position);
                }
            }
            
        } catch (error) {
            this.logger.error('Error procesando frame APRS:', error.message);
        }
    }

    /**
     * Cargar posiciones desde log CSV m√°s reciente de Direwolf
     */
    async loadFromDirewolfLog() {
        try {
            // Buscar TODOS los archivos de log con datos APRS (historial completo)
            const logsDir = path.join(__dirname, '../../logs');
            const logFiles = fs.readdirSync(logsDir)
                .filter(f => f.endsWith('.log'))
                .sort(); // Orden cronol√≥gico (m√°s antiguo primero)
            
            let processedFiles = 0;
            for (const logFile of logFiles) {
                const logFilePath = path.join(logsDir, logFile);
                if (fs.existsSync(logFilePath) && fs.statSync(logFilePath).size > 0) {
                    await this.loadPositionsFromFile(logFilePath, logFile);
                    processedFiles++;
                }
            }
            
            if (processedFiles === 0) {
                this.logger.warn('No se encontraron logs de Direwolf con datos');
                return;
            }
            
            // Actualizar estad√≠sticas basadas en todas las posiciones cargadas
            this.updateStatsFromLoadedPositions();
            this.logger.info(`üìö Historial APRS cargado desde ${processedFiles} archivos de log`);
            
        } catch (error) {
            this.logger.error('Error cargando historial de Direwolf:', error.message);
        }
    }

    /**
     * Cargar posiciones desde un archivo espec√≠fico de log
     */
    async loadPositionsFromFile(filePath, fileName) {
        try {
            const csvData = fs.readFileSync(filePath, 'utf8');
            const lines = csvData.trim().split('\n');
            
            // Primera l√≠nea es header CSV
            if (lines.length < 2) return 0;
            
            const header = lines[0].split(',');
            const latIndex = header.indexOf('latitude');
            const lonIndex = header.indexOf('longitude');
            const sourceIndex = header.indexOf('source');
            const timeIndex = header.indexOf('isotime');
            const commentIndex = header.indexOf('comment');
            const symbolIndex = header.indexOf('symbol');
            
            let positionsLoaded = 0;
            
            // Procesar cada l√≠nea del CSV
            for (let i = 1; i < lines.length; i++) {
                const fields = lines[i].split(',');
                
                // Verificar que tiene coordenadas v√°lidas
                const lat = parseFloat(fields[latIndex]);
                const lon = parseFloat(fields[lonIndex]);
                const callsign = fields[sourceIndex];
                
                if (isNaN(lat) || isNaN(lon) || !callsign) continue;
                
                const existingPositions = this.receivedPositions.get(callsign) || [];
                
                // Verificar si es una nueva ubicaci√≥n (diferencia > 200 metros para capturar posiciones significativas)
                const isNewLocation = existingPositions.length === 0 || 
                    !existingPositions.some(pos => {
                        const locDistance = this.calculateDistance(pos.lat, pos.lon, lat, lon);
                        return locDistance < 0.2; // 200 metros para capturar m√°s variaciones
                    });
                
                if (isNewLocation) {
                    const distanceKm = this.calculateDistance(
                        this.config.location.lat,
                        this.config.location.lon,
                        lat, lon
                    );
                    
                    const position = {
                        callsign: callsign,
                        lat: lat,
                        lon: lon,
                        timestamp: new Date(fields[timeIndex]),
                        comment: fields[commentIndex] || 'APRS',
                        symbol: fields[symbolIndex] || '/>',
                        lastHeard: new Date(fields[timeIndex]),
                        count: existingPositions.length + 1,
                        firstHeard: existingPositions.length === 0 ? new Date(fields[timeIndex]) : existingPositions[0].firstHeard,
                        distance: Math.round(distanceKm * 100) / 100,
                        locationId: Date.now() + i + Math.random() * 1000 // ID √∫nico
                    };
                    
                    existingPositions.push(position);
                    this.receivedPositions.set(callsign, existingPositions);
                    positionsLoaded++;
                }
            }
            
            this.logger.debug(`üìÇ ${fileName}: ${positionsLoaded} posiciones cargadas`);
            return positionsLoaded;
            
        } catch (error) {
            this.logger.error(`Error procesando ${fileName}:`, error.message);
            return 0;
        }
    }

    /**
     * Actualizar estad√≠sticas desde las posiciones cargadas
     */
    updateStatsFromLoadedPositions() {
        // Contar todas las entradas de los logs de Direwolf para coincidir con el contador
        let totalPacketsReceived = 0;
        let latestPosition = null;
        let latestTime = 0;
        
        try {
            // Contar entradas en todos los logs de Direwolf
            const logsDir = path.join(__dirname, '../../logs');
            const logFiles = fs.readdirSync(logsDir).filter(f => f.endsWith('.log'));
            
            for (const logFile of logFiles) {
                const logPath = path.join(logsDir, logFile);
                if (fs.existsSync(logPath)) {
                    const content = fs.readFileSync(logPath, 'utf8');
                    const lines = content.trim().split('\n');
                    // Contar l√≠neas que no sean el header
                    totalPacketsReceived += lines.filter(line => line && !line.includes('chan,utime')).length;
                }
            }
        } catch (error) {
            this.logger.warn('Error contando packets de logs:', error.message);
            // Fallback: contar posiciones √∫nicas
            for (const [callsign, positionArray] of this.receivedPositions.entries()) {
                totalPacketsReceived += positionArray.filter(pos => !pos.archived).length;
            }
        }
        
        // Encontrar la posici√≥n m√°s reciente
        for (const [callsign, positionArray] of this.receivedPositions.entries()) {
            positionArray.forEach(pos => {
                if (pos.timestamp && typeof pos.timestamp.getTime === 'function' && pos.timestamp.getTime() > latestTime) {
                    latestTime = pos.timestamp.getTime();
                    latestPosition = pos;
                }
            });
        }
        
        this.stats.positionsReceived = totalPacketsReceived;
        if (latestPosition) {
            this.stats.lastPosition = latestPosition;
        }
        
        this.logger.info(`üìä Total de packets APRS recibidos: ${totalPacketsReceived}`);
    }

    /**
     * Cargar posiciones guardadas (compatible con formato anterior y nuevo)
     */
    async loadSavedPositions() {
        try {
            if (fs.existsSync(this.logFile)) {
                const data = fs.readFileSync(this.logFile, 'utf8');
                const fileContent = JSON.parse(data);
                
                let positions = [];
                
                // Detectar formato (nuevo con metadata o viejo array directo)
                if (fileContent.metadata && fileContent.stations) {
                    // Formato nuevo con metadata
                    positions = fileContent.stations;
                    this.logger.info(`Archivo APRS v${fileContent.metadata.version} - ${fileContent.metadata.totalStations} estaciones`);
                } else if (Array.isArray(fileContent)) {
                    // Formato viejo (array directo)
                    positions = fileContent;
                    this.logger.info('Migrando formato anterior de posiciones APRS');
                } else {
                    this.logger.warn('Formato de archivo APRS desconocido');
                    return;
                }
                
                // Agrupar posiciones por callsign para mantener historial
                const positionsByCallsign = new Map();
                positions.forEach(pos => {
                    // Convertir timestamp string de vuelta a Date
                    if (pos.timestamp) pos.timestamp = new Date(pos.timestamp);
                    if (pos.lastHeard) pos.lastHeard = new Date(pos.lastHeard);
                    
                    // Inicializar contador si no existe
                    if (!pos.count) pos.count = 1;
                    
                    // Agrupar por callsign
                    if (!positionsByCallsign.has(pos.callsign)) {
                        positionsByCallsign.set(pos.callsign, []);
                    }
                    positionsByCallsign.get(pos.callsign).push(pos);
                });
                
                // Guardar en el formato nuevo (arrays de posiciones por callsign)
                this.receivedPositions = positionsByCallsign;
                
                this.logger.info(`Cargadas ${positions.length} posiciones APRS desde archivo`);
                
                // Si era formato viejo, guardar en formato nuevo
                if (Array.isArray(fileContent)) {
                    await this.savePositionToLog(null);
                }
            }
        } catch (error) {
            this.logger.warn('Error cargando posiciones guardadas:', error.message);
            this.logger.warn('Se continuar√° sin posiciones previas');
        }
    }

    /**
     * Guardar posici√≥n a archivo de log (con respaldo rotativo)
     */
    async savePositionToLog(position) {
        try {
            // Crear respaldo cada 100 posiciones
            if (this.receivedPositions.size > 0 && this.receivedPositions.size % 100 === 0) {
                await this.createBackup();
            }

            // Aplanar todas las posiciones de todos los callsigns
            const positions = [];
            for (const [callsign, positionArray] of this.receivedPositions.entries()) {
                positionArray.forEach(pos => {
                    positions.push({
                        callsign: pos.callsign,
                        lat: pos.lat,
                        lon: pos.lon,
                        timestamp: pos.timestamp,
                        comment: pos.comment || '',
                        symbol: pos.symbol || '/',
                        lastHeard: pos.lastHeard,
                        distance: pos.distance,
                        count: pos.count || 1,
                        locationId: pos.locationId
                    });
                });
            }

            // Calcular estad√≠sticas de fechas para filtros
            const dates = positions.map(p => p.timestamp).filter(t => t);
            const earliestDate = dates.length > 0 ? new Date(Math.min(...dates.map(d => new Date(d).getTime()))) : null;
            const latestDate = dates.length > 0 ? new Date(Math.max(...dates.map(d => new Date(d).getTime()))) : null;
            const maxDistance = Math.max(...positions.map(p => p.distance || 0));
            const maxDistanceStation = positions.find(p => p.distance === maxDistance);

            // Guardar de forma as√≠ncrona para no bloquear
            fs.writeFileSync(this.logFile, JSON.stringify({
                metadata: {
                    version: '1.0',
                    generated: new Date(),
                    totalStations: positions.length,
                    dateRange: {
                        earliest: earliestDate,
                        latest: latestDate,
                        daysSpan: earliestDate && latestDate ? 
                            Math.ceil((latestDate - earliestDate) / (1000 * 60 * 60 * 24)) + 1 : 1
                    },
                    maxDistance: {
                        distance: maxDistance,
                        station: maxDistanceStation ? {
                            callsign: maxDistanceStation.callsign,
                            timestamp: maxDistanceStation.timestamp
                        } : null
                    },
                    repeater: {
                        callsign: this.config.callsign,
                        location: this.config.location
                    }
                },
                stations: positions
            }, null, 2));

        } catch (error) {
            this.logger.error('Error guardando posici√≥n:', error.message);
        }
    }

    /**
     * Crear respaldo de posiciones
     */
    async createBackup() {
        try {
            const backupFile = this.logFile.replace('.json', `-backup-${Date.now()}.json`);
            const currentData = fs.readFileSync(this.logFile, 'utf8');
            fs.writeFileSync(backupFile, currentData);
            
            // Mantener solo los √∫ltimos 5 respaldos
            const backupsDir = path.dirname(this.logFile);
            const backupFiles = fs.readdirSync(backupsDir)
                .filter(f => f.includes('aprs-positions-backup'))
                .sort()
                .reverse();
            
            if (backupFiles.length > 5) {
                backupFiles.slice(5).forEach(file => {
                    fs.unlinkSync(path.join(backupsDir, file));
                });
            }
            
            this.logger.info('Respaldo de posiciones APRS creado');
        } catch (error) {
            this.logger.warn('Error creando respaldo:', error.message);
        }
    }

    /**
     * Anunciar nueva posici√≥n por voz
     */
    async announceNewPosition(position) {
        try {
            const message = `Nueva posici√≥n APRS recibida de ${position.callsign}`;
            await this.audio.speak(message);
        } catch (error) {
            this.logger.error('Error anunciando posici√≥n:', error.message);
        }
    }



    /**
     * Enviar beacon APRS
     */
    async sendBeacon() {
        if (!this.tncConnection) {
            throw new Error('No hay conexi√≥n con TNC');
        }
        
        try {
            // Crear packet APRS manual para env√≠o inmediato
            const beaconInfo = this.createPositionPacket();
            
            // Enviar v√≠a KISS TNC usando socket TCP directo
            const net = require('net');
            const socket = new net.Socket();
            
            await new Promise((resolve, reject) => {
                socket.setTimeout(5000, () => {
                    socket.destroy();
                    reject(new Error('Timeout conectando a KISS TNC'));
                });
                
                socket.connect(this.config.direwolf.kissPort, 'localhost', () => {
                    // Crear frame KISS b√°sico
                    // Formato: <FEND><CMD><DATA><FEND>
                    const FEND = 0xC0;
                    const CMD_DATA = 0x00; // Canal 0, comando Data
                    
                    // Crear packet AX.25 b√°sico
                    const packet = this.createAX25Packet(beaconInfo);
                    
                    const kissFrame = Buffer.concat([
                        Buffer.from([FEND, CMD_DATA]),
                        packet,
                        Buffer.from([FEND])
                    ]);
                    
                    socket.write(kissFrame);
                    socket.end();
                    resolve();
                });
                
                socket.on('error', (err) => {
                    socket.destroy();
                    reject(err);
                });
            });
            
            this.stats.beaconsSent++;
            this.stats.lastBeacon = new Date();
            
            this.logger.info('Beacon APRS enviado v√≠a KISS TNC');
            this.emit('beacon_sent', {
                timestamp: this.stats.lastBeacon,
                callsign: this.config.callsign,
                location: this.config.location
            });
            
        } catch (error) {
            this.logger.error('Error enviando beacon:', error.message);
            throw error;
        }
    }

    /**
     * Crear informaci√≥n de posici√≥n para beacon
     */
    createPositionPacket() {
        const lat = this.config.location.lat;
        const lon = this.config.location.lon;
        
        // Convertir coordenadas decimales a formato APRS DDMM.MM
        const latDeg = Math.abs(lat);
        const latDir = lat >= 0 ? 'N' : 'S';
        const lonDeg = Math.abs(lon);
        const lonDir = lon >= 0 ? 'E' : 'W';
        
        // Calcular grados y minutos
        const latDegrees = Math.floor(latDeg);
        const latMinutes = (latDeg - latDegrees) * 60;
        const lonDegrees = Math.floor(lonDeg);
        const lonMinutes = (lonDeg - lonDegrees) * 60;
        
        // Formato APRS: DDMM.hhN/DDDMM.hhW
        // Latitud: DD MM . hh N (8 caracteres)
        const latStr = String(latDegrees).padStart(2, '0') + 
                      String(latMinutes.toFixed(2)).padStart(5, '0') + latDir;
        
        // Longitud: DDD MM . hh W (9 caracteres)  
        const lonStr = String(lonDegrees).padStart(3, '0') + 
                      String(lonMinutes.toFixed(2)).padStart(5, '0') + lonDir;
        
        // S√≠mbolo APRS: tabla/s√≠mbolo (ej: /h para casa)
        const symbolTable = this.config.beacon.symbol ? this.config.beacon.symbol[0] : '/';
        const symbolCode = this.config.beacon.symbol ? this.config.beacon.symbol[1] : 'h';
        
        // Formato APRS est√°ndar: =DDMM.hhN/DDDMM.hhWsCommentario
        return `=${latStr}${symbolTable}${lonStr}${symbolCode}${this.config.beacon.comment || 'VX200 RPT'}`;
    }

    /**
     * Crear packet AX.25 b√°sico
     */
    createAX25Packet(info) {
        // Los callsigns en AX.25 deben ser shifted 1 bit a la izquierda
        function shiftCallsign(call) {
            const padded = call.padEnd(6, ' ');
            const shifted = Buffer.alloc(6);
            for (let i = 0; i < 6; i++) {
                shifted[i] = padded.charCodeAt(i) << 1;
            }
            return shifted;
        }
        
        // Destination (APRS) y Source callsign
        const dest = shiftCallsign('APRS');
        const source = shiftCallsign(this.config.callsign);
        
        // SSID bytes (√∫ltimo bit indica end-of-address)
        const destSSID = 0x60; // SSID 0, command bit, not repeated
        const sourceSSID = 0x61; // SSID 0, command bit, last address (bit 0 = 1)
        
        // Header AX.25 completo
        const header = Buffer.concat([
            dest, Buffer.from([destSSID]),
            source, Buffer.from([sourceSSID]),
            Buffer.from([0x03, 0xF0]) // Control (UI frame) + PID (no layer 3)
        ]);
        
        return Buffer.concat([header, Buffer.from(info)]);
    }

    /**
     * Obtener tiempo desde √∫ltimo beacon en minutos
     */
    getTimeSinceLastBeacon() {
        if (!this.stats.lastBeacon || typeof this.stats.lastBeacon.getTime !== 'function') return 'nunca';
        try {
            return Math.floor((Date.now() - this.stats.lastBeacon.getTime()) / 1000 / 60);
        } catch (error) {
            this.logger.warn('Error calculando tiempo desde √∫ltimo beacon:', error.message);
            return 'error';
        }
    }

    /**
     * Iniciar timer de beacon autom√°tico
     */
    async startBeaconTimer() {
        if (this.beaconTimer) {
            clearInterval(this.beaconTimer);
        }

        const interval = this.config.beacon.interval; // ya est√° en ms
        const offset = this.config.beacon.offset || 0; // offset para evitar colisiones

        // Enviar primer beacon despu√©s del offset
        setTimeout(async () => {
            await this.sendBeaconSafe();
            
            // Luego enviar cada intervalo
            this.beaconTimer = setInterval(async () => {
                await this.sendBeaconSafe();
            }, interval);
            
        }, offset);

        this.logger.info(`Beacon autom√°tico configurado: cada ${Math.floor(interval/60000)} minutos`);
    }

    /**
     * Enviar beacon de forma segura con manejo de errores
     */
    async sendBeaconSafe() {
        try {
            if (this.tncConnection) {
                await this.sendBeacon();
            } else {
                this.logger.warn('Beacon omitido: sin conexi√≥n TNC');
            }
        } catch (error) {
            this.logger.error('Error enviando beacon autom√°tico:', error.message);
        }
    }

    /**
     * Iniciar sistema APRS
     */
    async start() {
        if (this.isRunning) {
            this.logger.warn('APRS ya est√° ejecut√°ndose');
            return false;
        }
        
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }
            
            // El endpoint KISS se conecta autom√°ticamente
            this.isRunning = true;
            
            // Iniciar beacon autom√°tico si est√° habilitado
            if (this.config.beacon.enabled) {
                await this.startBeaconTimer();
            }
            
            // Iniciar limpieza autom√°tica de posiciones
            this.scheduleCleanup();
            
            this.logger.info('Sistema APRS iniciado');
            return true;
            
        } catch (error) {
            this.logger.error('Error iniciando APRS:', error.message);
            return false;
        }
    }

    /**
     * Detener sistema APRS
     */
    stop() {
        if (!this.isRunning) {
            return;
        }
        
        try {
            // Desconectar TNC (TCP directo)
            if (this.kissSocket && !this.kissSocket.destroyed) {
                this.kissSocket.end();
                this.kissSocket.destroy();
            }
            
            // Limpiar timers
            if (this.beaconTimer) {
                clearInterval(this.beaconTimer);
                this.beaconTimer = null;
            }
            
            if (this.cleanupTimer) {
                clearInterval(this.cleanupTimer);
                this.cleanupTimer = null;
            }
            
            this.isRunning = false;
            this.tncConnection = false;
            
            this.logger.info('Sistema APRS detenido');
            
        } catch (error) {
            this.logger.error('Error deteniendo APRS:', error.message);
        }
    }

    /**
     * Obtener estado del m√≥dulo
     */
    getStatus() {
        return {
            running: this.isRunning,
            initialized: this.isInitialized,
            tncConnected: this.tncConnection,
            stats: { ...this.stats },
            config: {
                callsign: this.config.callsign,
                location: this.config.location,
                beaconEnabled: this.config.beacon.enabled
            },
            positions: {
                total: this.receivedPositions.size,
                recent: Array.from(this.receivedPositions.values())
                    .sort((a, b) => b.timestamp - a.timestamp)
                    .slice(0, 10)
            }
        };
    }

    /**
     * Obtener todas las posiciones para el mapa (solo activas)
     */
    getAllPositions() {
        const allPositions = [];
        // Aplanar todas las posiciones de todos los callsigns
        for (const [callsign, positionArray] of this.receivedPositions.entries()) {
            positionArray.forEach(pos => {
                if (!pos.archived) {
                    allPositions.push(pos);
                }
            });
        }
        return allPositions.sort((a, b) => (b.lastHeard || b.timestamp) - (a.lastHeard || a.timestamp));
    }

    /**
     * Obtener estad√≠sticas detalladas
     */
    getDetailedStats() {
        // Usar el mismo m√©todo que getAllPositions para obtener todas las posiciones
        const allPositions = [];
        for (const [callsign, positionArray] of this.receivedPositions.entries()) {
            positionArray.forEach(pos => allPositions.push(pos));
        }
        const active = allPositions.filter(pos => !pos.archived);
        const archived = allPositions.filter(pos => pos.archived);
        
        return {
            total: allPositions.length,
            active: active.length,
            archived: archived.length,
            beacons: {
                sent: this.stats.beaconsSent,
                received: this.stats.positionsReceived,
                lastSent: this.stats.lastBeacon,
                lastReceived: this.stats.lastPosition?.timestamp
            },
            uptime: (this.stats.startTime && typeof this.stats.startTime.getTime === 'function') ? 
                Math.floor((Date.now() - this.stats.startTime.getTime()) / 1000 / 60) : 0,
            mostActive: active
                .sort((a, b) => (b.count || 0) - (a.count || 0))
                .slice(0, 5)
                .map(pos => ({ callsign: pos.callsign, count: pos.count || 0 }))
        };
    }

    /**
     * Actualizar configuraci√≥n de beacon APRS
     */
    async updateBeaconConfig(newConfig) {
        try {
            // Actualizar configuraci√≥n local
            if (newConfig.enabled !== undefined) {
                this.config.beacon.enabled = newConfig.enabled;
            }
            if (newConfig.interval) {
                this.config.beacon.interval = newConfig.interval * 60 * 1000; // convertir a ms
            }
            if (newConfig.callsign) {
                this.config.callsign = newConfig.callsign;
            }
            if (newConfig.comment) {
                this.config.beacon.comment = newConfig.comment;
            }

            // Actualizar DirewolfManager si est√° disponible
            const DirewolfManager = require('../utils/direwolfManager');
            const direwolf = new DirewolfManager();
            
            await direwolf.updateConfig({
                callsign: this.config.callsign,
                beacon: {
                    interval: Math.floor(newConfig.interval || 15),
                    comment: this.config.beacon.comment
                }
            });

            this.logger.info('Configuraci√≥n APRS actualizada:', newConfig);
            return true;
            
        } catch (error) {
            this.logger.error('Error actualizando configuraci√≥n APRS:', error.message);
            throw error;
        }
    }

    /**
     * Limpiar posiciones antiguas (configurables por edad)
     */
    cleanupOldPositions() {
        const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 d√≠as por defecto
        const cutoff = Date.now() - maxAge;
        let removed = 0;
        let archived = 0;
        
        for (const [callsign, position] of this.receivedPositions.entries()) {
            const lastHeard = position.lastHeard || position.timestamp;
            
            if (lastHeard && typeof lastHeard.getTime === 'function' && lastHeard.getTime() < cutoff) {
                // Archivar posiciones muy antiguas pero importantes
                if (position.count >= 5) { // Estaciones frecuentes
                    position.archived = true;
                    archived++;
                } else {
                    // Eliminar estaciones poco frecuentes
                    this.receivedPositions.delete(callsign);
                    removed++;
                }
            }
        }
        
        if (removed > 0 || archived > 0) {
            this.logger.info(`Limpieza APRS: ${removed} eliminadas, ${archived} archivadas`);
            this.savePositionToLog(null); // Guardar cambios
        }
    }

    /**
     * Programar limpieza autom√°tica
     */
    scheduleCleanup() {
        // Limpiar cada 6 horas
        this.cleanupTimer = setInterval(() => {
            this.cleanupOldPositions();
        }, 6 * 60 * 60 * 1000);
    }

    /**
     * Destruir m√≥dulo
     */
    destroy() {
        this.stop();
        this.removeAllListeners();
        this.logger.info('M√≥dulo APRS destruido');
    }
}

module.exports = APRS;