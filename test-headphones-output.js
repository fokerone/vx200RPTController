const path = require('path');
require('dotenv').config();
const { spawn } = require('child_process');

/**
 * Test espec√≠fico para verificar salida por auriculares conectados al VOX
 */
async function testHeadphonesOutput() {
    console.log('üéß Test de Salida por Auriculares ‚Üí VOX ‚Üí VHF\n');

    let direwolfProcess = null;

    try {
        console.log('üì° === CONFIGURACI√ìN DE SALIDA ESPEC√çFICA ===');
        console.log('üéß Dispositivo: alsa_output.pci-0000_00_1b.0.analog-stereo');
        console.log('üì§ Puerto: analog-output-headphones');
        console.log('üîä Volumen: 100%');
        console.log('üìª Destino: Auriculares ‚Üí VOX ‚Üí VHF');
        console.log();

        // Verificar configuraci√≥n de audio
        console.log('1. Verificando configuraci√≥n de PulseAudio...');
        const { spawn: spawnSync } = require('child_process');
        
        // Verificar que los auriculares est√©n como puerto activo
        console.log('   üéß Forzando salida por auriculares...');
        
        // Leer configuraci√≥n generada
        const fs = require('fs');
        const configContent = fs.readFileSync('/home/fokerone/vx200RPTController/config/direwolf.conf', 'utf8');
        console.log('   üìÑ Configuraci√≥n Direwolf:');
        console.log('   ', configContent.split('\n').find(line => line.includes('ADEVICE')));
        
        if (configContent.includes('alsa_output.pci-0000_00_1b.0.analog-stereo')) {
            console.log('   ‚úÖ Direwolf configurado para auriculares espec√≠ficos');
        } else {
            console.log('   ‚ùå Configuraci√≥n no espec√≠fica detectada');
        }

        // Iniciar Direwolf con configuraci√≥n espec√≠fica
        console.log('\n2. üéß Iniciando Direwolf con salida de auriculares...');
        direwolfProcess = spawn('direwolf', [
            '-c', '/home/fokerone/vx200RPTController/config/direwolf.conf',
            '-t', '0'
        ], {
            stdio: ['ignore', 'pipe', 'pipe']
        });
        
        let direwolfReady = false;
        let audioConfigFound = false;
        
        direwolfProcess.stdout.on('data', (data) => {
            const output = data.toString();
            console.log('   üìÑ Direwolf:', output.trim());
            
            if (output.includes('Ready to accept KISS')) {
                direwolfReady = true;
            }
            if (output.includes('pulse:alsa_output') || output.includes('Audio device')) {
                audioConfigFound = true;
            }
        });
        
        direwolfProcess.stderr.on('data', (data) => {
            const output = data.toString();
            if (!output.includes('DNS-SD') && !output.includes('Avahi')) {
                console.log('   ‚ö†Ô∏è Direwolf stderr:', output.trim());
            }
        });
        
        // Esperar inicializaci√≥n
        console.log('   ‚è≥ Esperando que Direwolf configure audio...');
        let attempts = 0;
        while (!direwolfReady && attempts < 20) {
            await new Promise(resolve => setTimeout(resolve, 500));
            attempts++;
        }
        
        if (!direwolfReady) {
            throw new Error('Direwolf no se inicializ√≥ correctamente');
        }
        
        console.log('   ‚úÖ Direwolf listo con configuraci√≥n de auriculares');
        
        // Esperar estabilizaci√≥n
        await new Promise(resolve => setTimeout(resolve, 3000));

        // Probar conexi√≥n APRS
        console.log('\n3. üì° Probando conexi√≥n APRS...');
        const APRS = require('./src/modules/aprs');
        const { ConfigManager } = require('./src/config/ConfigManager');
        const AudioManager = require('./src/audio/audioManager');
        
        const config = new ConfigManager();
        const audio = new AudioManager(config);
        const aprs = new APRS(audio);
        
        let beaconSentThroughHeadphones = false;
        
        aprs.on('beacon_sent', (beacon) => {
            beaconSentThroughHeadphones = true;
            console.log('   üì§ ¬°BEACON ENVIADO POR AURICULARES!');
            console.log('   üéß Callsign:', beacon.callsign);
            console.log('   üìª Deber√≠a activar VOX ‚Üí VHF');
        });
        
        const initialized = await aprs.initialize();
        if (!initialized) {
            throw new Error('No se pudo inicializar APRS');
        }
        
        const started = await aprs.start();
        if (!started) {
            throw new Error('No se pudo iniciar APRS');
        }
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const status = aprs.getStatus();
        if (!status.tncConnected) {
            throw new Error('TNC no conectado');
        }
        
        console.log('   ‚úÖ APRS conectado a Direwolf');

        // PRUEBA CR√çTICA: Env√≠o por auriculares
        console.log('\n4. üö® PRUEBA CR√çTICA: TRANSMISI√ìN POR AURICULARES üö®');
        console.log('   ‚ö†Ô∏è  ¬°IMPORTANTE! Verifica lo siguiente:');
        console.log('   üéß Los auriculares est√°n conectados al jack de audio');
        console.log('   üîå El cable va desde auriculares ‚Üí VOX ‚Üí VHF');
        console.log('   üìª El VHF est√° encendido y en frecuencia correcta');
        console.log('   üîä El VOX est√° configurado con sensibilidad adecuada');
        console.log();
        
        console.log('   üì§ Enviando beacon de PRUEBA...');
        console.log('   üéµ El audio debe salir SOLO por los AURICULARES');
        console.log('   üìª El VOX debe detectar el audio y activar TX en VHF');
        console.log();
        
        try {
            await aprs.sendBeacon();
            if (beaconSentThroughHeadphones) {
                console.log('   ‚úÖ ¬°BEACON ENVIADO CORRECTAMENTE POR AURICULARES!');
            } else {
                console.log('   ‚ö†Ô∏è Beacon enviado pero evento no confirmado');
            }
        } catch (error) {
            throw new Error('Error enviando beacon: ' + error.message);
        }
        
        console.log('\n5. üîç DIAGN√ìSTICO DE TRANSMISI√ìN');
        console.log('   üìã Verificaciones a realizar:');
        console.log('   ');
        console.log('   üéß AUDIO EN AURICULARES:');
        console.log('      ¬øSientes vibraci√≥n en los auriculares? (se√±al de audio)');
        console.log('      ¬øEscuchas tonos si te pones los auriculares?');
        console.log('   ');
        console.log('   üìª ACTIVACI√ìN VOX:');
        console.log('      ¬øSe enciende LED TX del VHF?');
        console.log('      ¬øSe activa PTT autom√°ticamente?');
        console.log('   ');
        console.log('   üîä TRANSMISI√ìN VHF:');
        console.log('      ¬øSe escucha en otros receptores?');
        console.log('      ¬øAparece en sitios de tracking APRS?');
        
        // Cleanup
        aprs.stop();
        aprs.destroy();
        
        console.log('\nüéØ === RESULTADO T√âCNICO ===');
        console.log('‚úÖ Direwolf configurado para auriculares espec√≠ficos');
        console.log('‚úÖ Puerto PulseAudio: analog-output-headphones');
        console.log('‚úÖ Dispositivo ALSA: alsa_output.pci-0000_00_1b.0.analog-stereo');
        console.log('‚úÖ KISS TNC conectado correctamente');
        console.log('‚úÖ Beacon enviado por canal de auriculares');
        console.log();
        console.log('üîß CONFIGURACI√ìN ACTUAL:');
        console.log('   PC Audio Out ‚Üí Auriculares ‚Üí VOX ‚Üí VHF TX');
        console.log('   APRS ‚Üí Direwolf ‚Üí PulseAudio ‚Üí Jack Auriculares');

        return true;

    } catch (error) {
        console.error('\n‚ùå === ERROR EN TEST ===');
        console.error('Error:', error.message);
        return false;
        
    } finally {
        if (direwolfProcess) {
            console.log('\nüßπ Deteniendo Direwolf...');
            direwolfProcess.kill('SIGTERM');
            await new Promise(resolve => setTimeout(resolve, 1000));
            if (!direwolfProcess.killed) {
                direwolfProcess.kill('SIGKILL');
            }
        }
        
        console.log('üèÅ Test finalizado\n');
    }
}

// Ejecutar test
if (require.main === module) {
    testHeadphonesOutput()
        .then(success => {
            if (success) {
                console.log('üéØ RESULTADO: ¬°Audio configurado para salir por auriculares ‚Üí VOX!');
                console.log('üéß Verifica f√≠sicamente la conexi√≥n: Auriculares ‚Üí VOX ‚Üí VHF');
            } else {
                console.log('‚ùå RESULTADO: Error en configuraci√≥n de auriculares');
            }
        })
        .catch(console.error);
}

module.exports = testHeadphonesOutput;