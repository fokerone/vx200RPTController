const path = require('path');
require('dotenv').config();

// Configurar paths
process.env.NODE_PATH = path.join(__dirname, 'src');

const DirewolfManager = require('./src/utils/direwolfManager');
const APRS = require('./src/modules/aprs');
const { ConfigManager } = require('./src/config/ConfigManager');
const AudioManager = require('./src/audio/audioManager');

/**
 * Test para verificar la actualizaci√≥n de configuraci√≥n APRS
 * Callsign: BASE1
 * Ubicaci√≥n: Guaymall√©n, Mendoza
 */
async function testAPRSConfigUpdate() {
    console.log('üîß Test de actualizaci√≥n configuraci√≥n APRS\n');

    let config, audio, aprs, direwolf;

    try {
        console.log('üì° === NUEVA CONFIGURACI√ìN APRS ===');
        console.log('Callsign: BASE1');
        console.log('Ubicaci√≥n: Guaymall√©n, Mendoza');
        console.log('Coordenadas: -32.885, -68.739');
        console.log('Beacon: Cada 10 minutos');
        console.log();

        // Inicializar componentes
        console.log('üîß Inicializando componentes...');
        
        config = new ConfigManager();
        audio = new AudioManager(config);
        aprs = new APRS(audio);
        direwolf = new DirewolfManager();

        console.log('‚úÖ Componentes inicializados\n');

        // Test 1: Verificar configuraci√≥n del m√≥dulo APRS
        console.log('üìã === TEST 1: CONFIGURACI√ìN M√ìDULO APRS ===');
        const aprsStatus = aprs.getStatus();
        console.log('Configuraci√≥n APRS:');
        console.log(`   Callsign: ${aprsStatus.config.callsign}`);
        console.log(`   Ubicaci√≥n: ${aprsStatus.config.location.lat}, ${aprsStatus.config.location.lon}`);
        console.log(`   Lugar: ${aprsStatus.config.location.name}`);
        console.log(`   Beacon habilitado: ${aprsStatus.config.beaconEnabled}`);
        
        const correctCallsign = aprsStatus.config.callsign === 'BASE1';
        const correctLocation = Math.abs(aprsStatus.config.location.lat - (-32.885)) < 0.001 &&
                               Math.abs(aprsStatus.config.location.lon - (-68.739)) < 0.001;
        
        console.log(`   ‚úÖ Callsign correcto: ${correctCallsign}`);
        console.log(`   ‚úÖ Ubicaci√≥n correcta: ${correctLocation}`);
        console.log();

        // Test 2: Verificar configuraci√≥n de DirewolfManager
        console.log('üìã === TEST 2: CONFIGURACI√ìN DIREWOLF MANAGER ===');
        const direwolfStatus = direwolf.getStatus();
        console.log('Configuraci√≥n Direwolf:');
        console.log(`   Callsign: ${direwolfStatus.config.callsign}`);
        console.log(`   Ubicaci√≥n: ${direwolfStatus.config.location.lat}, ${direwolfStatus.config.location.lon}`);
        console.log(`   Puerto KISS: ${direwolfStatus.config.ports.kiss}`);
        console.log(`   Puerto AGW: ${direwolfStatus.config.ports.agw}`);
        
        const direwolfCorrect = direwolfStatus.config.callsign === 'BASE1' &&
                               Math.abs(direwolfStatus.config.location.lat - (-32.885)) < 0.001;
        
        console.log(`   ‚úÖ Configuraci√≥n Direwolf correcta: ${direwolfCorrect}`);
        console.log();

        // Test 3: Generar nueva configuraci√≥n de Direwolf
        console.log('‚öôÔ∏è === TEST 3: GENERACI√ìN CONFIGURACI√ìN DIREWOLF ===');
        console.log('Generando archivo de configuraci√≥n con nuevos valores...');
        
        const configGenerated = direwolf.generateConfig();
        console.log(`Configuraci√≥n generada: ${configGenerated ? '‚úÖ S√ç' : '‚ùå NO'}`);
        
        if (configGenerated) {
            const fs = require('fs');
            const configPath = path.join(__dirname, 'config/direwolf.conf');
            const configExists = fs.existsSync(configPath);
            console.log(`Archivo config existe: ${configExists ? '‚úÖ S√ç' : '‚ùå NO'}`);
            
            if (configExists) {
                const configContent = fs.readFileSync(configPath, 'utf8');
                console.log('\nüìÑ Contenido del archivo de configuraci√≥n:');
                console.log('‚îÄ'.repeat(60));
                console.log(configContent);
                console.log('‚îÄ'.repeat(60));
                
                const hasCorrectCallsign = configContent.includes('MYCALL BASE1');
                const hasCorrectLat = configContent.includes('lat=-32.885');
                const hasCorrectLon = configContent.includes('long=-68.739');
                const hasGuaymallen = configContent.includes('Guaymallen');
                
                console.log('\nVerificaci√≥n del contenido:');
                console.log(`   ‚úÖ Callsign BASE1: ${hasCorrectCallsign}`);
                console.log(`   ‚úÖ Latitud correcta: ${hasCorrectLat}`);
                console.log(`   ‚úÖ Longitud correcta: ${hasCorrectLon}`);
                console.log(`   ‚úÖ Menciona Guaymall√©n: ${hasGuaymallen}`);
            }
        }
        console.log();

        // Test 4: Verificar mapa web
        console.log('üåê === TEST 4: CONFIGURACI√ìN MAPA WEB ===');
        const mapFile = path.join(__dirname, 'public/aprs-map.html');
        const fs = require('fs');
        
        if (fs.existsSync(mapFile)) {
            const mapContent = fs.readFileSync(mapFile, 'utf8');
            const hasBase1 = mapContent.includes('BASE1');
            const hasGuaymallenCoords = mapContent.includes('-32.885') && mapContent.includes('-68.739');
            const hasGuaymallenName = mapContent.includes('Guaymall√©n');
            
            console.log('Configuraci√≥n del mapa web:');
            console.log(`   ‚úÖ Callsign BASE1: ${hasBase1}`);
            console.log(`   ‚úÖ Coordenadas Guaymall√©n: ${hasGuaymallenCoords}`);
            console.log(`   ‚úÖ Nombre Guaymall√©n: ${hasGuaymallenName}`);
            
            const mapConfigCorrect = hasBase1 && hasGuaymallenCoords && hasGuaymallenName;
            console.log(`   ‚úÖ Mapa web configurado correctamente: ${mapConfigCorrect}`);
        } else {
            console.log('   ‚ùå Archivo de mapa no encontrado');
        }
        console.log();

        // Test 5: Inicializar APRS con nueva configuraci√≥n
        console.log('üöÄ === TEST 5: INICIALIZACI√ìN CON NUEVA CONFIGURACI√ìN ===');
        try {
            console.log('Inicializando m√≥dulo APRS...');
            
            // Mock para evitar conexi√≥n real
            const originalInitialize = aprs.initializeKISSConnection;
            aprs.initializeKISSConnection = async () => {
                console.log('   Mock: Conexi√≥n KISS simulada con BASE1');
                aprs.tncConnection = false;
            };
            
            const initialized = await aprs.initialize();
            console.log(`Inicializaci√≥n APRS: ${initialized ? '‚úÖ √âXITO' : '‚ùå FALLO'}`);
            
            // Verificar que mantiene la configuraci√≥n
            const finalStatus = aprs.getStatus();
            const keepConfig = finalStatus.config.callsign === 'BASE1';
            console.log(`Configuraci√≥n mantenida: ${keepConfig ? '‚úÖ S√ç' : '‚ùå NO'}`);
            
            // Restaurar funci√≥n original
            aprs.initializeKISSConnection = originalInitialize;
            
        } catch (error) {
            console.log('‚ùå Error en inicializaci√≥n:', error.message);
        }
        console.log();

        // Test 6: Simulaci√≥n de beacon
        console.log('üì° === TEST 6: SIMULACI√ìN BEACON BASE1 ===');
        console.log('Simulando env√≠o de beacon con nueva configuraci√≥n...');
        
        const beaconData = {
            callsign: aprsStatus.config.callsign,
            location: aprsStatus.config.location,
            timestamp: new Date(),
            comment: 'Test beacon from Guaymall√©n'
        };
        
        console.log('Datos del beacon:');
        console.log(`   üì° Callsign: ${beaconData.callsign}`);
        console.log(`   üìç Ubicaci√≥n: ${beaconData.location.lat}, ${beaconData.location.lon}`);
        console.log(`   üìù Lugar: ${beaconData.location.name}`);
        console.log(`   ‚è∞ Timestamp: ${beaconData.timestamp.toISOString()}`);
        console.log(`   üí¨ Comentario: ${beaconData.comment}`);
        
        // Emitir evento simulado
        aprs.emit('beacon_sent', beaconData);
        console.log('   ‚úÖ Evento beacon simulado enviado');
        console.log();

        console.log('üéØ === DIAGN√ìSTICO FINAL ===');
        
        const allCorrect = correctCallsign && correctLocation && direwolfCorrect && configGenerated;
        
        if (allCorrect) {
            console.log('‚úÖ CONFIGURACI√ìN APRS ACTUALIZADA CORRECTAMENTE');
            console.log('');
            console.log('üì° NUEVA CONFIGURACI√ìN ACTIVA:');
            console.log('   üè∑Ô∏è Callsign: BASE1');
            console.log('   üìç Ubicaci√≥n: Guaymall√©n, Mendoza');
            console.log('   üåê Coordenadas: -32.885, -68.739');
            console.log('   ‚è∞ Beacon: Cada 10 minutos');
            console.log('   üìù Comentario: VX200 RPT Controller - Guaymallen, Mendoza');
            console.log('');
            console.log('üîß ARCHIVOS ACTUALIZADOS:');
            console.log('   ‚úÖ src/modules/aprs.js');
            console.log('   ‚úÖ src/utils/direwolfManager.js');
            console.log('   ‚úÖ config/direwolf.conf');
            console.log('   ‚úÖ public/aprs-map.html');
            console.log('');
            console.log('üöÄ LISTO PARA PRODUCCI√ìN:');
            console.log('   1. Configuraci√≥n BASE1 activa');
            console.log('   2. Ubicaci√≥n en Guaymall√©n configurada');
            console.log('   3. Mapa web actualizado');
            console.log('   4. Direwolf config regenerada');
        } else {
            console.log('‚ö†Ô∏è CONFIGURACI√ìN INCOMPLETA');
            if (!correctCallsign) console.log('   ‚ùå Callsign no actualizado correctamente');
            if (!correctLocation) console.log('   ‚ùå Ubicaci√≥n no actualizada correctamente');
            if (!direwolfCorrect) console.log('   ‚ùå Direwolf config no actualizada');
            if (!configGenerated) console.log('   ‚ùå Archivo config no generado');
        }

        return allCorrect;

    } catch (error) {
        console.error('\n‚ùå === ERROR EN TEST ===');
        console.error('Error:', error.message);
        console.error('Stack:', error.stack);
        
        return false;
    } finally {
        // Limpiar recursos
        console.log('\nüßπ Limpiando recursos...');
        
        try {
            if (aprs && typeof aprs.destroy === 'function') {
                aprs.destroy();
                console.log('‚úÖ APRS destruido');
            }
            
            if (direwolf && typeof direwolf.destroy === 'function') {
                direwolf.destroy();
                console.log('‚úÖ DirewolfManager destruido');
            }
            
            if (audio && typeof audio.destroy === 'function') {
                audio.destroy();
                console.log('‚úÖ AudioManager destruido');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error limpiando:', error.message);
        }
        
        console.log('üèÅ Test finalizado\n');
    }
}

// Ejecutar test si se llama directamente
if (require.main === module) {
    testAPRSConfigUpdate()
        .then(success => {
            if (success) {
                console.log('üéØ RESULTADO: ¬°Configuraci√≥n APRS actualizada correctamente!');
                console.log('üì° BASE1 en Guaymall√©n, Mendoza est√° listo para operar.');
                process.exit(0);
            } else {
                console.log('‚ùå RESULTADO: Error actualizando configuraci√≥n APRS');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('Error fatal:', error.message);
            process.exit(1);
        });
}

module.exports = testAPRSConfigUpdate;