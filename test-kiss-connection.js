const net = require('net');

// Test directo de conexi√≥n KISS
async function testKISSConnection() {
    console.log('üîå Test de Conexi√≥n KISS Directa\n');
    
    return new Promise((resolve) => {
        console.log('1. Intentando conectar a localhost:8001...');
        
        const socket = new net.Socket();
        socket.setTimeout(5000);
        
        socket.on('connect', () => {
            console.log('‚úÖ Conexi√≥n TCP establecida con √©xito');
            console.log('üì° Puerto KISS 8001 est√° activo y respondiendo');
            socket.end();
            resolve(true);
        });
        
        socket.on('timeout', () => {
            console.log('‚è∞ Timeout - Puerto no responde');
            socket.destroy();
            resolve(false);
        });
        
        socket.on('error', (error) => {
            console.log('‚ùå Error de conexi√≥n:', error.message);
            socket.destroy();
            resolve(false);
        });
        
        socket.on('close', () => {
            console.log('üîê Conexi√≥n cerrada');
        });
        
        socket.connect(8001, 'localhost');
    });
}

// Test con utils-for-aprs
async function testUtilsForAPRS() {
    console.log('\nüì° Test de utils-for-aprs\n');
    
    try {
        const { SocketKISSFrameEndpoint } = require('utils-for-aprs');
        console.log('‚úÖ Librer√≠a utils-for-aprs cargada correctamente');
        
        console.log('2. Creando SocketKISSFrameEndpoint...');
        const endpoint = new SocketKISSFrameEndpoint({
            host: 'localhost',
            port: 8001
        });
        
        console.log('‚úÖ Endpoint creado');
        
        // Configurar eventos
        endpoint.on('open', () => {
            console.log('‚úÖ Evento OPEN: Conectado al TNC KISS');
        });
        
        endpoint.on('close', () => {
            console.log('üîê Evento CLOSE: Desconectado del TNC KISS');
        });
        
        endpoint.on('error', (error) => {
            console.log('‚ùå Evento ERROR:', error.message);
        });
        
        endpoint.on('data', (data) => {
            console.log('üì• Evento DATA: Frame recibido, longitud:', data.length);
        });
        
        console.log('3. Eventos configurados, esperando conexi√≥n...');
        
        // Esperar eventos por 10 segundos
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        console.log('4. Finalizando test');
        if (endpoint && typeof endpoint.close === 'function') {
            endpoint.close();
        }
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Error con utils-for-aprs:', error.message);
        return false;
    }
}

async function runTests() {
    console.log('üß™ Test de Conectividad KISS\n');
    
    // Test 1: Conexi√≥n TCP directa
    const tcpWorks = await testKISSConnection();
    
    if (tcpWorks) {
        // Test 2: utils-for-aprs
        const utilsWorks = await testUtilsForAPRS();
        
        console.log('\nüéØ === RESULTADOS ===');
        console.log(`TCP directo: ${tcpWorks ? '‚úÖ FUNCIONA' : '‚ùå FALLA'}`);
        console.log(`utils-for-aprs: ${utilsWorks ? '‚úÖ FUNCIONA' : '‚ùå FALLA'}`);
        
        if (tcpWorks && utilsWorks) {
            console.log('\n‚úÖ CONEXI√ìN KISS COMPLETAMENTE FUNCIONAL');
        } else if (tcpWorks && !utilsWorks) {
            console.log('\n‚ö†Ô∏è TCP funciona pero utils-for-aprs tiene problemas');
        }
    } else {
        console.log('\n‚ùå Puerto KISS 8001 no est√° disponible');
        console.log('   Aseg√∫rate de que Direwolf est√© ejecut√°ndose');
    }
}

runTests().catch(console.error);